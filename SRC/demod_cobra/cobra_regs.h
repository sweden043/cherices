/* cobra_regs.h */

/*+++ *******************************************************************\
*
*   Copyright and Disclaimer:
*
*       ---------------------------------------------------------------
*       ALL SOFTWARE, APPLICATIONS, DOCUMENTATION, OR MATERIALS        
*       FURNISHED HEREIN IS PROVIDED *AS IS*.  CONEXANT DOES NOT MAKE  
*       ANY WARRANTIES, EITHER EXPRESS OR IMPLIED, AND HEREBY EXPRESSLY
*       DISCLAIMS ANY AND ALL SUCH WARRANTIES TO THE EXTENT PERMITTED  
*       BY LAW, INCLUDING, SPECIFICALLY, ANY IMPLIED WARRANTY ARISING  
*       BY STATUTE OR OTHERWISE IN LAW OR FROM A COURSE OF DEALING OR  
*       USAGE OF TRADE.  CONEXANT DOES NOT MAKE ANY WARRANTIES, EITHER 
*       EXPRESS OR IMPLIED, AND HEREBY EXPRESSLY DISCLAIMS ANY AND ALL 
*       SUCH WARRANTIES WITH RESPECT TO ALL SOFTWARE, APPLICATIONS,    
*       DOCUMENTATION, AND MATERIALS INCLUDING ALL IMPLIED WARRANTIES  
*       OF MERCHANTABILITY, OR OF MERCHANTABLE QUALITY, OR OF FITNESS  
*       FOR ANY PURPOSE, PARTICULAR, SPECIFIC OR OTHERWISE, OR OF      
*       NONINFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OF OTHERS,     
*       RELATING TO THE SOFTWARE, APPLICATIONS, OPERATION,             
*       DOCUMENTATION, DATA OR RESULTS GENERATED BY THE OPERATION OR   
*       USE THEREOF, AND MATERIALS PROVIDED HEREIN.  THE ENTIRE RISK AS
*       TO THE SUBSTANCE, QUALITY AND PERFORMANCE OF SOFTWARE,         
*       APPLICATIONS, AND DOCUMENTATION DESCRIBING SUCH SOFTWARE       
*       REMAINS WITH THE BUYER.                                        
*                                                                      
*       REGARDLESS OF WHETHER ANY REMEDY SET FORTH HEREIN FAILS OF ITS 
*       ESSENTIAL PURPOSE OR OTHERWISE, CONEXANT SHALL NOT BE LIABLE   
*       FOR ANY EXEMPLARY, SPECIAL, PUNITIVE, SPECULATIVE, INDIRECT,   
*       CONSEQUENTIAL OR INCIDENTAL DAMAGES OF ANY KIND (INCLUDING     
*       WITHOUT LIMITATION LOST PROFITS, LOSS OF INCOME, LOSS OF       
*       GOODWILL, OR OTHER TANGIBLE OR INTANGIBLE BUSINESS LOSS)       
*       ARISING OUT OF OR IN CONNECTION WITH, DIRECTLY OR INDIRECTLY,  
*       SOFTWARE, APPLICATIONS, DOCUMENTATION, OR ANY SERVICES OR      
*       MATERIALS PROVIDED HEREUNDER, OR USE OR INABILITY TO USE THE   
*       SOFTWARE, EVEN IF CONEXANT HAS BEEN ADVISED OF THE POSSIBILITY 
*       OF SUCH DAMAGES.                                               
*
*       Copyright (c) 2001 Conexant Systems, Inc.
*       All Rights Reserved.
*       ---------------------------------------------------------------
*
*   Module Revision Id:
*
*       $Header: cobra_regs.h, 5, 3/16/04 11:48:55 AM, Billy Jackman$
*
*   Abstract:
*
*       Contains structure and definitions used internally by the Cobra Driver software.
*
\******************************************************************* ---*/

#ifndef COBRA_REGS_H_DEFINED
#define COBRA_REGS_H_DEFINED

/*******************************************************************************************************/
/* Include Cobra internal */
/*******************************************************************************************************/
#include "cobra_gbls.h"                /* Cobra Globals */


#ifdef __cplusplus
extern "C" {
#else
#endif  /* __cplusplus */

/*******************************************************************************************************/
/* Register-specific Enums */
/*******************************************************************************************************/
enum RegDataType{                      /* all possible types of register data must be defined */
  REGT_BIT=1,                          /* bit (most common type) */
  REGT_BYTE,                           /* byte-wide register */
  REGT_MINT,                           /* int with n-bit msb in first register, remaining bits in next reg(s) */
  REGT_INT,                            /* int type */
  REGT_UINT,                           /* unsigned int register type */
  REGT_LONG,                           /* standard long */
  REGT_ULONG,                          /* unsigned long */
  REGT_INVBIT,                         /* inverted bool (TRUE means FALSE -> ask the hardware guys!) */
  REGT_BITHL,                          /* special-purpose: bit is set high, then immediatly set low */
  REGT_NULL,                           /* byte-wide register */
  REGT_EOLIST=0                        /* end-of-list indicator */
};

/*******************************************************************************************************/
/* REGRW */
/*******************************************************************************************************/
enum RegRW{                            /* register access controls */
  REG_RW=1,                            /* register has full read/write capabilities */
  REG_RO=2,                            /* register is read-only */
  REG_WO=3,                            /* register is write-only */
  REG_UNUSED=0                         /* register is unused (also EOL indicator) */
};


/*******************************************************************************************************/
/* REGFILTER (upgraded to Camaric) */
/*******************************************************************************************************/
#define REGF  unsigned int
typedef enum RegFilter{
  REGF_COBRA=0x01,                     /* register item is part of Cobra-class */
  REGF_CAM_DEF=0x02,                   /* register is used within camaric-only default settings */
  REGF_CAM_EXT=0x04,                   /* Register is an extended register (to acomodate Camaric) */
  REGF_CAM_ONLY=0x08,                  /* Register is a Camaric-only register */
  REGF_CAM_RED=0x10,                   /* Register is reduced to accomodate Camaric (none id'd yet) */
  REGF_ZEROB6=0x80,                    /* zero bit 6 before write (accomodate register 0x29) */
  REGF_NONE=0                          /* no particular filter attached to a register item */
}_REGF;

/*******************************************************************************************************/
/* REGISTER Struct */
/*******************************************************************************************************/
typedef struct                  /* REGISTER.  This struct will be used to control access to */
{                               /* register mapped items in the various demods */
  char   *regname;              /*   asciz name of register */
  REGIDX reg_idx;               /*   register simplification ID */
  unsigned char addr;           /*   address from register map (hex) */
  unsigned char starting;       /*   starting pt. of bits in addr */
  unsigned char bit_count;      /*   length of reg item in bits */
  enum   RegRW     regRW;       /*   Indicates if register HW can be read/written */
  REGF   regfilter;             /*   Additional layer of filterization */
  enum   RegDataType regtype;   /*   type of data held in register(s): */
                                /*     ...  BIT, COMP2, COMP1, FLOAT, UINT, INT ,....*/
  unsigned long  default_value; /*   holds default value (for reset) to write to the register */
  char   *hwmask;               /*   holds hardware mask string -- 1st byte of mask is first reg addr */

}REGISTER;

/*******************************************************************************************************/
/* external reference to Register array in Cobra_reg.c */
/*******************************************************************************************************/
extern const REGISTER Register[];

/*******************************************************************************************************/
/* Register-specific test functions */
/*******************************************************************************************************/
char *test_regname(const char *regname);
char *test_regidx(const char  *regname);
char *test_regrw(int regrw);
char *test_regfilt(int regfilt);
char *test_regtype(int regtype);
char *test_regshad(int regtype);

/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/
#ifdef __cplusplus
}
#endif

#endif  /* #ifndef COBRA_REGS_H_DEFINED */
/* CR 9509 : Add an extra newline */

