/* cobra_gbls.h */

/*+++ *******************************************************************\
*
*   Copyright and Disclaimer:
*
*       ---------------------------------------------------------------
*       ALL SOFTWARE, APPLICATIONS, DOCUMENTATION, OR MATERIALS        
*       FURNISHED HEREIN IS PROVIDED *AS IS*.  CONEXANT DOES NOT MAKE  
*       ANY WARRANTIES, EITHER EXPRESS OR IMPLIED, AND HEREBY EXPRESSLY
*       DISCLAIMS ANY AND ALL SUCH WARRANTIES TO THE EXTENT PERMITTED  
*       BY LAW, INCLUDING, SPECIFICALLY, ANY IMPLIED WARRANTY ARISING  
*       BY STATUTE OR OTHERWISE IN LAW OR FROM A COURSE OF DEALING OR  
*       USAGE OF TRADE.  CONEXANT DOES NOT MAKE ANY WARRANTIES, EITHER 
*       EXPRESS OR IMPLIED, AND HEREBY EXPRESSLY DISCLAIMS ANY AND ALL 
*       SUCH WARRANTIES WITH RESPECT TO ALL SOFTWARE, APPLICATIONS,    
*       DOCUMENTATION, AND MATERIALS INCLUDING ALL IMPLIED WARRANTIES  
*       OF MERCHANTABILITY, OR OF MERCHANTABLE QUALITY, OR OF FITNESS  
*       FOR ANY PURPOSE, PARTICULAR, SPECIFIC OR OTHERWISE, OR OF      
*       NONINFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OF OTHERS,     
*       RELATING TO THE SOFTWARE, APPLICATIONS, OPERATION,             
*       DOCUMENTATION, DATA OR RESULTS GENERATED BY THE OPERATION OR   
*       USE THEREOF, AND MATERIALS PROVIDED HEREIN.  THE ENTIRE RISK AS
*       TO THE SUBSTANCE, QUALITY AND PERFORMANCE OF SOFTWARE,         
*       APPLICATIONS, AND DOCUMENTATION DESCRIBING SUCH SOFTWARE       
*       REMAINS WITH THE BUYER.                                        
*                                                                      
*       REGARDLESS OF WHETHER ANY REMEDY SET FORTH HEREIN FAILS OF ITS 
*       ESSENTIAL PURPOSE OR OTHERWISE, CONEXANT SHALL NOT BE LIABLE   
*       FOR ANY EXEMPLARY, SPECIAL, PUNITIVE, SPECULATIVE, INDIRECT,   
*       CONSEQUENTIAL OR INCIDENTAL DAMAGES OF ANY KIND (INCLUDING     
*       WITHOUT LIMITATION LOST PROFITS, LOSS OF INCOME, LOSS OF       
*       GOODWILL, OR OTHER TANGIBLE OR INTANGIBLE BUSINESS LOSS)       
*       ARISING OUT OF OR IN CONNECTION WITH, DIRECTLY OR INDIRECTLY,  
*       SOFTWARE, APPLICATIONS, DOCUMENTATION, OR ANY SERVICES OR      
*       MATERIALS PROVIDED HEREUNDER, OR USE OR INABILITY TO USE THE   
*       SOFTWARE, EVEN IF CONEXANT HAS BEEN ADVISED OF THE POSSIBILITY 
*       OF SUCH DAMAGES.                                               
*
*       Copyright (c) 2001 Conexant Systems, Inc.
*       All Rights Reserved.
*       ---------------------------------------------------------------
*
*   Module Revision Id:
*
*       $Header: cobra_gbls.h, 5, 3/16/04 11:48:15 AM, Billy Jackman$
*
*   Abstract:
*
*       Contains global variables definitions and reference.
*
\******************************************************************* ---*/

#ifndef COBRA_GBLS_H_DEFINED
#define COBRA_GBLS_H_DEFINED

#ifndef COBRAEXT
extern  NIM_LIST  nim_list;
extern  unsigned int      *tuners_supported;
extern  char     **_tuners_supported;
/* --> */
extern  BOOL (*TUNER_GetType)(NIM *nim,TUNER *tunertype);
extern  BOOL (*TUNER_SetType)(NIM *nim);
extern  BOOL (*TUNER_Initialize)(NIM *nim);
extern  BOOL (*TUNER_SetGainParameters)(NIM *nim,TUNERPARMS*);
extern  BOOL (*TUNER_GetPLLLockStatus)(NIM *nim,BOOL *locked);
extern  BOOL (*TUNER_GetVCO)(NIM *nim,unsigned char *vcono);
extern  BOOL (*TUNER_SetReferenceDivider)(NIM *nim,RDIVVAL rvalue);
extern  BOOL (*TUNER_GetReferenceDivider)(NIM *nim,RDIVVAL *rvalue);
extern  BOOL (*TUNER_GetVcoDivider)(NIM *nim,VCODIV *vcodiv);
extern  BOOL (*TUNER_GetPLLFrequency)(NIM *nim,unsigned long *pllfreq);
extern  BOOL (*TUNER_SetRegisters)(NIM *nim,int nvalue,int avalue,RDIVVAL rvalue);
extern  BOOL (*TUNER_GetRegisters)(NIM *nim,int *nvalue,int *avalue,RDIVVAL *rvalue);
extern  BOOL (*TUNER_GetParameters)(NIM *nim,TUNERPARMS*);
extern  BOOL (*TUNER_SetParameters)(NIM *nim,TUNERPARMS*);
extern  BOOL (*TUNER_GetFrequency)(NIM *nim,unsigned long *freq);
extern  BOOL (*TUNER_SetFrequency)(NIM *nim,unsigned long freq);
extern  BOOL (*TUNER_SetLastLock)(NIM *nim,unsigned long freq);
extern  BOOL (*TUNER_GetLastLock)(NIM *nim,unsigned long *freq);
extern  BOOL (*TUNER_GetVCOEdges)(NIM *nim,VCO_EDGE *vcoedge);
extern  BOOL (*TUNER_SetVCOEdges)(NIM *nim,VCO_EDGE *vcoedge);
extern  BOOL (*TUNER_GetVCOBreakpoints)(NIM *nim,int *bp_percentage,VCO_EDGE *vcoedge,VCO_BP*);
extern  BOOL (*TUNER_SetVCOBreakpointPercentage)(NIM *nim,int bp_percentage);
extern  BOOL (*TUNER_GetVCOBreakpointPercentage)(NIM *nim,int *bp_percentage);
extern  BOOL (*TUNER_vcoedges)(NIM *nim, VCO_EDGE *vcoedge, int *vcoedgecount);
extern  BOOL (*TUNER_SetFilterBandwidth)(NIM *nim,unsigned long bandwidthkhz,unsigned long *mV);
extern  BOOL (*TUNER_SetGainSettings)(NIM *nim,unsigned long symbolrateksps);

extern  BOOL (*TUNER_CalculateNAR)(NIM *nim,unsigned long Fdesired,RDIVVAL R,unsigned int *N,unsigned int *A);

#else
NIM_LIST  nim_list;                    /* list of active NIMs */
unsigned int *tuners_supported;        /* list of supported tuners */
char  **_tuners_supported;      /* names of supported tuners */
BOOL (*TUNER_GetType)(NIM *nim,TUNER *tunertype);
BOOL (*TUNER_SetType)(NIM *nim);
BOOL (*TUNER_Initialize)(NIM *nim);
BOOL (*TUNER_SetGainParameters)(NIM *nim,TUNERPARMS*);
BOOL (*TUNER_GetPLLLockStatus)(NIM *nim,BOOL *locked);
BOOL (*TUNER_GetVCO)(NIM *nim,unsigned char *vcono);
BOOL (*TUNER_SetReferenceDivider)(NIM *nim,RDIVVAL rvalue);
BOOL (*TUNER_GetReferenceDivider)(NIM *nim,RDIVVAL *rvalue);
BOOL (*TUNER_GetVcoDivider)(NIM *nim,VCODIV *vcodiv);
BOOL (*TUNER_GetPLLFrequency)(NIM *nim,unsigned long *pllfreq);
BOOL (*TUNER_SetRegisters)(NIM *nim,int nvalue,int avalue,RDIVVAL rvalue);
BOOL (*TUNER_GetRegisters)(NIM *nim,int *nvalue,int *avalue,RDIVVAL *rvalue);
BOOL (*TUNER_GetParameters)(NIM *nim,TUNERPARMS*);
BOOL (*TUNER_SetParameters)(NIM *nim,TUNERPARMS*);
BOOL (*TUNER_GetFrequency)(NIM *nim,unsigned long *freq);
BOOL (*TUNER_SetFrequency)(NIM *nim,unsigned long freq);
BOOL (*TUNER_SetLastLock)(NIM *nim,unsigned long freq);
BOOL (*TUNER_GetLastLock)(NIM *nim,unsigned long *freq);
BOOL (*TUNER_GetVCOEdges)(NIM *nim,VCO_EDGE *vcoedge);
BOOL (*TUNER_SetVCOEdges)(NIM *nim,VCO_EDGE *vcoedge);
BOOL (*TUNER_GetVCOBreakpoints)(NIM *nim,int *bp_percentage,VCO_EDGE *vcoedge,VCO_BP*);
BOOL (*TUNER_SetVCOBreakpointPercentage)(NIM *nim,int bp_percentage);
BOOL (*TUNER_GetVCOBreakpointPercentage)(NIM *nim,int *bp_percentage);
BOOL (*TUNER_vcoedges)(NIM *nim, VCO_EDGE *vcoedge, int *vcoedgecount);
BOOL (*TUNER_SetFilterBandwidth)(NIM *nim,unsigned long bandwidthkhz,unsigned long *mV);
BOOL (*TUNER_SetGainSettings)(NIM *nim,unsigned long symbolrateksps);

BOOL (*TUNER_CalculateNAR)(NIM *nim,unsigned long Fdesired,RDIVVAL R,unsigned int *N,unsigned int *A);
#endif


/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/

#endif  /* #ifndef COBRA_GBLS_H_DEFINED */
/* CR 9509 : Add an extra newline */

