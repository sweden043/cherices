# ***************************************************************
# *            CONEXANT PROPRIETARY AND CONFIDENTIAL            *
# *                SOFTWARE FILE/MODULE HEADER                  *
# *    Conexant Systems Inc. (c) 1998, 1999, 2000, 2001, 2002   *
# *                        Austin, TX                           *
# *                     All Rights Reserved                     *
# ***************************************************************
# *                                                             *
# * Filename:     HWCONFIG.CFG                                  *
# *                                                             *
# *                                                             *
# * Description:  Hardware Configuration Option Definition File *
# *                                                             *
# *                                                             *
# * Author:       Dave Wilson                                   *
# *                                                             *
# ***************************************************************
# * $Id:hwconfig.cfg,v 1.114, 2004-06-29 16:06:35Z, Tim White$
# ***************************************************************

# ***********************************************************
# * Some basic definitions used throughout the config files *
# ***********************************************************
YES = 1
NO  = 0
NEGATIVE = 0
POSITIVE = 1
PRESENT = 1
NOT_PRESENT = 0
AUTOSENSE = (-1)
HW_NONE = NOT_PRESENT
FROM_CONFIG = (-2)
NOT_DETERMINED = (-1)
DMA_DISABLED = (-1)

# **************************************************************
# * GPIO pin definition values (used in hardware config files) *
# **************************************************************
GPIO_MASK_PIN_NUMBER    = 0x00000FFF
GPIO_MASK_DEVICE_ID     = 0x0FF00000
GPIO_DEVICE_ID_INTERNAL = 0x00000000
GPIO_DEVICE_ID_I2C_MASK = 0x00F00000
GPIO_DEVICE_ID_I2C_1    = 0x00100000
GPIO_DEVICE_ID_I2C_2    = 0x00200000
GPIO_DEVICE_ID_ISA_MASK = 0x0F000000
GPIO_DEVICE_ID_ISA_1    = 0x01000000
GPIO_DEVICE_ID_ISA_2    = 0x02000000
GPIO_DEVICE_FLAGS_MASK  = 0x000FF000
GPIO_DEVICE_FLAG_PWM    = 0x00001000
GPIO_POLARITY_MASK      = 0x80000000
GPIO_NEGATIVE_POLARITY  = 0x80000000
GPIO_POSITIVE_POLARITY  = 0x00000000
GPIO_PIN_INPUT_MASK     = 0x40000000
GPIO_PIN_IS_INPUT       = 0x40000000
GPIO_PIN_IS_OUTPUT      = 0x00000000

# This invalid value may be used to mark an unpopulated GPIO function
GPIO_INVALID            = (GPIO_DEVICE_ID_I2C_1+0xFFF)

# *****************************************************************************
# * Chip-specific feature definitions.                                        *
# * These values define the function or implementation of particular blocks   *
# * of a chip in terms of previous chips using the same implementation. This  *
# * allows code to be more modular and not tied to one specific product since *
# * we can define the functionality of a module on a new chip in terms of a   *
# * previous one if it is the same.                                           *
# *****************************************************************************

# *************
# * CHIP_NAME *
# *************
COLORADO      =  0x490014F1
HONDO         =  0x249214F1
WABASH        =  0x443014F1
BRAZOS        =  0x415214F1

# ************
# * CPU_TYPE *
# ************
CPU_ARM940T = 0
CPU_ARM920T = 1

# ************
# * MMU_TYPE *
# ************
MMU_TYPE_940T = 0
MMU_TYPE_920T = 1


# *********************************
# * PCI Configuration Information *
# *********************************

# Colorado chips
PCI_VEND_DEV_ID_COLO_4900  =  0x490014f1
PCI_VEND_DEV_ID_COLO_4901  =  0x490114f1
PCI_REV_ID_A_COLO          =  0
PCI_REV_ID_B_COLO          =  1
PCI_REV_ID_C_COLO          =  2
PCI_REV_ID_F_COLO          =  4

# Hondo chips
PCI_VEND_DEV_ID_HONDO_2492 =  0x249214f1
PCI_VEND_DEV_ID_HONDO_2493 =  0x249314f1
PCI_REV_ID_A_HONDO         =  0

# Wabash Chips
PCI_VEND_DEV_ID_WABASH_4430 =  0x443014f1
PCI_VEND_DEV_ID_WABASH_4431 =  0x443114f1
PCI_REV_ID_A_WABASH         =  0
PCI_REV_ID_B_WABASH         =  1
PCI_REV_ID_C_WABASH         =  2
PCI_REV_ID_C1_WABASH        =  3

# Brazos chips
PCI_VEND_DEV_ID_BRAZOS     =  0x415214f1
PCI_REV_ID_A_BRAZOS        =  0
PCI_REV_ID_B_BRAZOS        =  1

# ************
# * PLL_TYPE *
# ************
PLL_TYPE_COLORADO = COLORADO
PLL_TYPE_WABASH   = WABASH
PLL_TYPE_BRAZOS   = BRAZOS

# **********************
# * Memory Delay Types *
# **********************                
MEM_DELAY_COLORADO = COLORADO
MEM_DELAY_HONDO    = HONDO
MEM_DELAY_WABASH   = WABASH
MEM_DELAY_BRAZOS   = BRAZOS
                  
# ****************
# *   HSDP type  *
# **************** 
HSDP_COLORADO  = COLORADO
HSDP_HONDO     = HONDO
HSDP_WABASH    = WABASH
HSDP_BRAZOS    = BRAZOS

# *************
# * UART_TYPE *
# *************
UART_COLORADO  = COLORADO
UART_WABASH    = WABASH

# ************
# * IIC Type *
# ************
IIC_TYPE_COLORADO = COLORADO
IIC_TYPE_WABASH   = WABASH
IIC_TYPE_BRAZOS   = BRAZOS

# *********************
# * GPIO MUX Versions *
# *********************
GPIOM_COLORADO = COLORADO
GPIOM_HONDO    = HONDO
GPIOM_WABASH   = WABASH
GPIOM_BRAZOS   = BRAZOS

# *****************************
# * Interrupt Expansion Types *
# *****************************
INTEXP_COLORADO = COLORADO
INTEXP_HONDO    = HONDO
INTEXP_WABASH   = WABASH
INTEXP_BRAZOS   = BRAZOS

# ***************************************************************
# * PARSER_MICROCODE, AUDIO_MICROCODE and VIDEO_MICROCODE types *
# ***************************************************************
UCODE_COLORADO = COLORADO
UCODE_HONDO    = HONDO
UCODE_WABASH   = WABASH
UCODE_BRAZOS   = BRAZOS

# ****************
# * ATA Versions *
# ****************
ATA_COLORADO = COLORADO
ATA_HONDO    = HONDO
ATA_WABASH   = WABASH
ATA_BRAZOS   = BRAZOS

# ****************
# * DMA Versions *
# ****************
DMA_COLORADO = COLORADO
DMA_WABASH   = WABASH
DMA_BRAZOS   = BRAZOS

# *******************
# * PCM Audio Types *
# *******************
PCM_AUDIO_COLORADO = COLORADO
PCM_AUDIO_WABASH   = WABASH
PCM_AUDIO_BRAZOS   = BRAZOS

# ****************************************
# * MPEG size register sync bit location *
# ****************************************
MPG_SYNC_BIT_POSITION_COLORADO = COLORADO
MPG_SYNC_BIT_POSITION_WABASH   = WABASH

# ******************************************************
# * Internal video encoder type                        *
# ******************************************************
#INTERNAL_BT861_LIKE = (BT861 | 0x1000000)  ;Assembler barfs on this
INTERNAL_BT861_LIKE = (861 | 0x1000000)
EXTERNAL            = NOT_PRESENT
                       
# ************************
# * Internal demod type  *
# ************************
INTERNAL_COBRA_LIKE = (0x1024121)
                       
# ********************************************************************
# * Video microcode RAM width/download method                        *
# ********************************************************************
VIDEO_UCODE_DOWNLOAD_COLORADO = COLORADO
VIDEO_UCODE_DOWNLOAD_BRAZOS   = BRAZOS   

# *******************************
# * DRM scaler coefficient type *
# *******************************
DRM_SCALER_COEFF_TYPE_COLORADO = COLORADO                         
DRM_SCALER_COEFF_TYPE_BRAZOS   = BRAZOS
DRM_SCALER_COEFF_TYPE_WABASH   = WABASH

# ***************************************
# * DRM Cursor fetch size register type *
# ***************************************
DRM_CURSOR_FETCH_TYPE_COLORADO  = COLORADO 
DRM_CURSOR_FETCH_TYPE_BRAZOS    = BRAZOS

# **********************************
# * DRM image tiling register type *
# **********************************
DRM_TILE_TYPE_COLORADO          = COLORADO
DRM_TILE_TYPE_BRAZOS            = BRAZOS

# ************************
# * Board Vendor Code/ID *
# ************************
VENDOR_ARM      = (-1)  
ROCKWELL        = 0
CONEXANT        = 0
CNXT            = 0
               
VENDOR_ID_MASK  = 0x780
VENDOR_ID_SHIFT = 7

# *********************************************************************
# * Values read directly from the hardware config register. These are *
# * returned by the KAL function read_board_and_vendor_codes.         *
# *********************************************************************
VENDOR_A = 0x0E
VENDOR_B = 0x0D
VENDOR_C = 0x0B
VENDOR_D = 0x07
VENDOR_E = 0x06
VENDOR_F = 0x05
VENDOR_G = 0x03

# **************************************
# * Generic Config Bit Definitions for *
# * accessing register as a DWORD      *
# **************************************
RSO_VENDOR_ID          = 0x00000780
RSO_ROM0_WIDTH         = 0x18000000
RSO_DBGREQ_ACK         = 0x20000000
RSO_6_CHAN_AUDIO       = 0x40000000
RSO_PLL_BYPASS         = 0x80000000
RSO_PLL_BYPASS_CLK_SEL = 0x00800000
RSO_ROM0_XOE_MASK      = 0x01000000

RSO_ROM0_SHIFT      = 27
RSO_ROM0_32BIT      = 0
RSO_ROM0_16BIT      = 2
RSO_ROM0_8BIT       = 1
                   
CS0DEFAULT_MASKED   = 1
CS0DEFAULT_UNMASKED = 0

ROM0WIDTH_32        = 0
ROM0WIDTH_8         = 1
ROM0WIDTH_16        = 2
ROM0WIDTH_32_ALT    = 3

AUDCHANNELS_6       = 0
AUDCHANNELS_2       = 1

PLLBYPASS_BYPASS    = 0
PLLBYPASS_NOBYPASS  = 1

# ************************
# * Serial Port Indicies *
# ************************
INTERNAL_SERIAL_MODEM_INDEX = 0
EXTERNAL_SERIAL_MODEM_INDEX = 1

# ***************************************************
# *  HSX Arbiter - controls priorities on HSX bus   *
# ***************************************************
HSX_ARBITER_NONE   = 0
HSX_ARBITER_WABASH = WABASH

# **********************************************
# * Config file keys and valid values for each *
# **********************************************

# ****************************************************
# * Processor- and Chip-specific Configuration Items *
# ****************************************************

?<tr><td colspan=4><font size="+1"><center><b>Processor- and Chip-specific Configuration Items</b></center></font></td></tr>
                          
CFG_KEY = PAGE_TABLE_INITIALIZATION
?<p>This parameter allows software to distinguish the different page table initializations required on different chips or revisions of chips.
[
  PHYSICAL_RAM           = 0
  VIRTUAL_SECTION_FORMAT = 1
  CFG_DEFAULT            = PHYSICAL_RAM
]

# ****************************************************
# * Board- and IRD-specific Configuration Items      *
# ****************************************************

?<tr><td colspan=4><font size="+1"><center><b>Board- and IRD-specific Configuration Items</b></center></font></td></tr>
                          
CFG_KEY = PLL_PIN_ALT_FUNC_REG_DEFAULT
?<p>This parameter is used to set the default value of PLL_PIN_ALT_FUNC_REG for the current IRD.
[
   ?<p>A valid PLL_PIN_ALT_FUNC_REG value for current IRD or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_GPIO_MUX0_REG_DEFAULT
?<p>This parameter is used to set the default value of PLL_PIN_GPIO_MUX0_REG for the current IRD.
[
   ?<p>A valid PLL_PIN_GPIO_MUX0_REG value for current IRD or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_GPIO_MUX1_REG_DEFAULT
?<p>This parameter is used to set the default value of PLL_PIN_GPIO_MUX1_REG for the current IRD.
[
   ?<p>A valid PLL_PIN_GPIO_MUX1_REG value for current IRD or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_GPIO_MUX2_REG_DEFAULT
?<p>This parameter is used to set the default value of PLL_PIN_GPIO_MUX2_REG for the current IRD.
[
   ?<p>A valid PLL_PIN_GPIO_MUX2_REG value for current IRD or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_GPIO_MUX3_REG_DEFAULT
?<p>This parameter is used to set the default value of PLL_PIN_GPIO_MUX3_REG for the current IRD.
[
   ?<p>A valid PLL_PIN_GPIO_MUX3_REG value for current IRD or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_ALT_FUNC_REG_DEFAULT_MILANO1
?<p>This parameter is used to set the default value of PLL_PIN_ALT_FUNC_REG for Milano Rev 1 ONLY.
[
   ?<p>A valid PLL_PIN_ALT_FUNC_REG value for Milano Rev 1 or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_GPIO_MUX0_REG_DEFAULT_MILANO1
?<p>This parameter is used to set the default value of PLL_PIN_GPIO_MUX0_REG for Milano Rev 1 ONLY.
[
   ?<p>A valid PLL_PIN_GPIO_MUX0_REG value for Milano Rev 1 or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_GPIO_MUX1_REG_DEFAULT_MILANO1
?<p>This parameter is used to set the default value of PLL_PIN_GPIO_MUX1_REG for Milano Rev 1 ONLY.
[
   ?<p>A valid PLL_PIN_GPIO_MUX1_REG value for Milano Rev 1 or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_GPIO_MUX2_REG_DEFAULT_MILANO1
?<p>This parameter is used to set the default value of PLL_PIN_GPIO_MUX2_REG for Milano Rev 1 ONLY.
[
   ?<p>A valid PLL_PIN_GPIO_MUX2_REG value for Milano Rev 1 or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PLL_PIN_GPIO_MUX3_REG_DEFAULT_MILANO1
?<p>This parameter is used to set the default value of PLL_PIN_GPIO_MUX3_REG for Milano Rev 1 ONLY.
[
   ?<p>A valid PLL_PIN_GPIO_MUX3_REG value for Milano Rev 1 or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = PCI_ISA_DESCRIPTOR_SETUP
?<p>Klondike, Hondo, Bronco, and Sparta all use similar descriptor configurations.  Milano is the
?first IRD to take a significant departure
[
   DESCRIPTOR_SETUP_KLONDIKE = 1
   DESCRIPTOR_SETUP_MILANO   = 2
   ?<p>Default to Klondike style descriptor setups
   CFG_DEFAULT            = DESCRIPTOR_SETUP_KLONDIKE  
]


# ******************************
# * RAM type and configuration *
# ******************************
?<tr><td colspan=4><font size="+1"><center><b>RAM Type and Configuration Options</b></center></font></td></tr>

CFG_KEY=RAM_RANK0_CONFIG
?<p>This key describes the configuration of the RAM devices populated in rank 0 on the target IRD.
[
  RAM_RANK_CONFIG_EMPTY              = 0
  RAM_RANK_CONFIG_1RAMS_8MB_64MBIT   = 1
  RAM_RANK_CONFIG_1RAMS_4MB_16MBIT   = 2
  RAM_RANK_CONFIG_4RAMS_8MB_16MBIT   = 3
  RAM_RANK_CONFIG_2RAMS_16MB_64MBIT  = 4
  RAM_RANK_CONFIG_2RAMS_32MB_128MBIT = 5
  RAM_RANK_CONFIG_2RAMS_64MB_256MBIT = 6
  CFG_DEFAULT                        = AUTOSENSE
  ?<p><b><i>What is the correct default value? The original HWCONFIG.H did not set a default.</i></b>
]
                          
CFG_KEY=RAM_RANK1_CONFIG
?<p>This key describes the configuration of the RAM devices populated in rank 1 on the target IRD.
[
  ?<p>Valid values are as for RAM_RANK0_CONFIG
  CFG_DEFAULT                        = AUTOSENSE
  ?<p><b><i>What is the correct default value? The original HWCONFIG.H did not set a default.</i></b>
]
                          
CFG_KEY=RAM_BUS_WIDTH
?<p>This key describes the width of the RAM bus in the target IRD.
[
  RAM_BUS_32BITS_WIDE                = 0
  RAM_BUS_16BITS_WIDE                = 1
  RAM_BUS_32BITS_WIDE_FORCED         = 2
  RAM_BUS_16BITS_WIDE_FORCED         = 3
  CFG_DEFAULT                        = RAM_BUS_32BITS_WIDE
]

?<tr><td colspan=4><font size="+1"><center><b>Emulation-related Options</b></center></font></td></tr>
                          
CFG_KEY = EMULATION_LEVEL
?<p>This parameter allows software to configure itself appropriately for different stages of hardware emulation and simulation during chip design verification and checkout. <i><b>This should be in the software config file.</b></i>
[
  PID7T          = 1
  PHASE2         = 2
  PHASE3         = 3
  FINAL_HARDWARE = 4  
  CFG_DEFAULT    = FINAL_HARDWARE
]

# **********************************
# *       Digital Display          *
# **********************************

?<tr><td colspan=4><font size="+1"><center><b>Digital Display Type and Options</b></center></font></td></tr>

CFG_KEY = DIGITAL_DISPLAY
?<p>For platforms that interface to an external digital display, this parameter defines 
?the digital display type in use in the target IRD.
[
  PW113_DISPLAY      = 1
  CFG_DEFAULT        = NOT_PRESENT
]

CFG_KEY = DIGITAL_DISPLAY_UART
?<p>For platforms that interface to an external digital display, this parameter defines 
?the UART port that it is connected to in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = INTERNAL_UART2
]

CFG_KEY = DIGITAL_DISPLAY_RESET_GPIO
?<p>For platforms that interface to an external digital display, this parameter defines 
?the GPIO pin that is connected to the reset input of the display.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = 49
]

# **********************************
# *       IRD Board Type           *
# **********************************

?<tr><td colspan=4><font size="+1"><center><b>IRD Board Type Settings</b></center></font></td></tr>

CFG_KEY = IRD_BOARD_TYPE
?<p>For platforms that have no the configuration EEPROM to identify the reference board,
?this parameter defines the type of the reference board.
[
  BOARD_TYPE_BRONCO     = 0
  BOARD_TYPE_BRONCO_DVT = 1
  BOARD_TYPE_EUREKA     = 2
  BOARD_TYPE_MILANO     = 3
  BOARD_TYPE_GUBEI_D    = 4
  BOARD_TYPE_GUBEI_E    = 5
  BOARD_TYPE_GUBEI_DQ   = 6
  BOARD_TYPE_PUDONG     = 7
  CFG_DEFAULT           = BOARD_TYPE_BRONCO
]

# **********************************
# *       Pudong Audio DAC         *
# **********************************

?<tr><td colspan=4><font size="+1"><center><b>Pudong Audio DAC Settings</b></center></font></td></tr>

CFG_KEY = PUDONG_AUDIO_DAC
?<p>For platforms that utilize an audio DAC that is different from the Pudong 
? reference board, this parameter defines the audio DAC type in use in the target IRD.
[
  AUDIO_DAC_CX4334      = 1
  AUDIO_DAC_HT82V731    = 2
  CFG_DEFAULT        = NOT_PRESENT
]

# **********************************
# *       External AV MUX          *
# **********************************

?<tr><td colspan=4><font size="+1"><center><b>External Audio Multiplexer Type and Options</b></center></font></td></tr>

CFG_KEY = EXTERNAL_AUDIO_MUX
?<p>For platforms with external audio multiplexer, this parameter defines 
?the type of multiplexer in use in the target IRD.
[
  CROSBY_EXT_AUDIO_MUX = 1
  CFG_DEFAULT          = NOT_PRESENT
]

CFG_KEY = EXTERNAL_AUDIO_MUX_NO_INPUTS
?<p>For platforms with an external audio multiplexer, this parameter defines 
?the number of inputs to the multiplexer in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = 2
]

CFG_KEY = EXTERNAL_AUDIO_MUX_GPIO_PIN_0
?<p>For platforms with an external audio multiplexer, this parameter defines 
?the GPIO number of the first control pin to the multiplexer in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = 32
]

CFG_KEY = EXTERNAL_AUDIO_MUX_RESET_GPIO_PIN
?<p>For platforms with an external audio multiplexer, this parameter defines 
?the GPIO number of the second control pin to the multiplexer in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = 33
]

CFG_KEY = CROSBY_MUX_AUDIO_INPUT_DEFAULT
?<p>For platforms with an external audio multiplexer, this parameter defines 
?inputs to the multiplexer in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  BRAZOS_DAC_OUTPUT  = 0
  MAKO_DAC_OUTPUT    = 1
  CFG_DEFAULT        = BRAZOS_DAC_OUTPUT
]

?<tr><td colspan=4><font size="+1"><center><b>External Video Multiplexer Type and Options</b></center></font></td></tr>

CFG_KEY = EXTERNAL_VIDEO_MUX
?<p>For platforms with external video multiplexer, this parameter defines 
?the type of multiplexer in use in the target IRD.
[
  CROSBY_EXT_VIDEO_MUX = 1
  CFG_DEFAULT          = NOT_PRESENT
]

CFG_KEY = EXTERNAL_VIDEO_MUX_NO_INPUTS
?<p>For platforms with an external video multiplexer, this parameter defines 
?the number of inputs to the multiplexer in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = 2
]

CFG_KEY = EXTERNAL_VIDEO_MUX_GPIO_PIN_0
?<p>For platforms with an external video multiplexer, this parameter defines 
?the GPIO number of the first control pin to the multiplexer in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = 37
]

CFG_KEY = CROSBY_MUX_VIDEO_INPUT_DEFAULT
?<p>For platforms with an external video multiplexer, this parameter defines 
?inputs to the multiplexer in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  MAKO_VIDEO_OUTPUT   = 1
  BRAZOS_VIDEO_OUTPUT = 0
  CFG_DEFAULT         = BRAZOS_VIDEO_OUTPUT
]

# *****************************************************
# *       External Analogue Capture Device Type       *
# *****************************************************

?<tr><td colspan=4><font size="+1"><center><b>Analogue Capture Device Types and Options</b></center></font></td></tr>

CFG_KEY = EXTERNAL_ANALOGUE_CAPTURE_DEVICE
?<p>For chips interfacing to an external analogue captue device, this parameter defines 
?the device in use in the target IRD.
[
  MAKO_CAPTURE_DEVICE  = 1
  TIGER_CAPTURE_DEVICE = 2
  CFG_DEFAULT          = NOT_PRESENT
]

CFG_KEY = EXTERNAL_ANALOGUE_CAPTURE_DEVICE_GPIO_PIN_0
?<p>For platforms with an external analogue capture device, this parameter defines 
?the GPIO number of the first control pin to the device in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = (36+GPIO_DEVICE_ID_INTERNAL+GPIO_POSITIVE_POLARITY+GPIO_PIN_IS_OUTPUT)
]

CFG_KEY = EXTERNAL_ANALOGUE_CAPTURE_DEVICE_GPIO_PIN_1
?<p>For platforms with an external analogue capture device, this parameter defines 
?the GPIO number of the second control pin to the device in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = (35+GPIO_DEVICE_ID_INTERNAL+GPIO_POSITIVE_POLARITY+GPIO_PIN_IS_OUTPUT)
]

CFG_KEY = EXTERNAL_ANALOGUE_CAPTURE_DEVICE_GPIO_INTERUPT
?<p>For platforms with an external analogue capture device, this parameter defines 
?the GPIO number of the interupt input from the device in use in the target IRD.
[
  ?<p>The default value is set correctly for a Crosby IRD.
  CFG_DEFAULT        = (34+GPIO_DEVICE_ID_INTERNAL+GPIO_NEGATIVE_POLARITY+GPIO_PIN_IS_INPUT)
]

# **********************************
# *       Video Encoder Type       *
# **********************************

?<tr><td colspan=4><font size="+1"><center><b>Video Encoder Types and Options</b></center></font></td></tr>

CFG_KEY = EXTERNAL_ENCODER
?<p>For chips interfacing to an external video encoder, this parameter defines 
?the encoder in use in the target IRD.
[
  BT865              = 865
  BT861              = 861
  DETECT_BT861_BT865 = 861865
  CFG_DEFAULT        = DETECT_BT861_BT865
]

# ***********************************************************
# *       Video Encoder Type for the new encoder driver     *
# ***********************************************************
CFG_KEY = VIDEO_ENCODER_0
?<p>This parameter defines the encoder type in use in the target IRD.
[
  TVENC_BT861         = 861      
  INTERNAL            = (861 | 0x1000000)
  CFG_DEFAULT         = INTERNAL
]

CFG_KEY = VIDEO_ENCODER_MACROVISION_CAPABLE
?<p>This parameter should be set to reflect whether or not Macrovision copy
? protection is enabled on the target IRD. It controls whether the Macrovision
? driver will be included in a software build. If this value is set to YES,
? the setting TURN_OFF_MACROVISION_DURING_INIT from the software config file
? determines the intiial Macrovision state when the IRD boots.

[
    ?<p>Valid values are YES and NO
    CFG_DEFAULT = NO
]

# ****************************************************
# * Internal Encoder Output Mode (DAC Configuration) *
# ****************************************************
CFG_KEY = INTERNAL_ENCODER_OUTMODE
?<p>This parameter controls the output mode configuration of the internal video encoder.
[
  ?<p>The default is set correctly for Wabash IRDs.
  CFG_DEFAULT = 1
]

CFG_KEY = VIDEO_ENCODER_RGB_DAC_MASK
?<p>This value contains an 8-bit mask defining the DACs to drive when requested to output 
? an RGB video signal. The mask value will depend upon the INTERNAL_ENCODER_OUTMODE value
? defined above.
[
  ?<p>The default value is set correctly for a Klondike IRD.
  CFG_DEFAULT = 0x38
]

CFG_KEY = VIDEO_ENCODER_YC_DAC_MASK
?<p>This value contains an 8-bit mask defining the DACs to drive when requested to output a
? YC (SVideo) video signal. The mask value will depend upon the INTERNAL_ENCODER_OUTMODE value
? defined above.
[
  ?<p>The default value is set correctly for a Klondike IRD.
  CFG_DEFAULT = 0x03
]

CFG_KEY = VIDEO_ENCODER_CVBS_DAC_MASK
?<p>This value contains an 8-bit mask defining the DACs to drive when requested to output a
? CVBS video signal. The mask value will depend upon the INTERNAL_ENCODER_OUTMODE value
? defined above.
[
  ?<p>The default value is set correctly for a Klondike IRD.
  CFG_DEFAULT = 0x04
]

CFG_KEY = VIDEO_SIGNAL_OUTPUT_TYPES
?<p>This value indicates which of the three video output signal types are supported via
?connectors on the target IRD.
[
  ?<p>The following values may be ORed together to indicate which subset of output
  ?formats the hardware supports.
  VIDEO_OUTPUT_CVBS = 1
  VIDEO_OUTPUT_RGB  = 2
  VIDEO_OUTPUT_YC   = 4
  CFG_DEFAULT = (VIDEO_OUTPUT_CVBS+VIDEO_OUTPUT_RGB+VIDEO_OUTPUT_YC)
]

CFG_KEY = ENCODER_HAS_DISABLE_DACS
?<p>This value indicates if the chip has a disabled DAC bit
[
  ?<p>The following sets the disable DAC bit in the encoder control register for wabash to 0.
  CFG_DEFAULT = NO
]

# ************************************
# *    Analog Video Decoder Type     *
# ************************************
?<tr><td colspan=4><font size="+1"><center><b>Analog Video Decoder</b></center></font></td></tr>

CFG_KEY = EXTERNAL_DECODER
?<p>For chips interfacing to an external video decoder, this parameter defines 
?the encoder in use in the target IRD.  The analog video & analog tuner drivers should
?exit gracefully if the hardware isn't present.
[
  BT835              = 835
  PHILIPS7112        = 7112
  CFG_DEFAULT        = NOT_PRESENT
]

# ****************************
# * Audio Capture ADC Params *
# ****************************
?<tr><td colspan=4><font size="+1"><center><b>Analog Audio ADC Options</b></center></font></td></tr>

CFG_KEY = ACAP_MODE
?<p>This value sets the Mode (Mono/Stereo) of the Analog Audio Input being 
?Captured.
[
  ?<p>The default value is set based on the Conexant Reference IRD
   ACAP_MODE_MONO = 0
   ACAP_MODE_STEREO = 1
   CFG_DEFAULT = ACAP_MODE_STEREO
]

CFG_KEY = ACAP_FORMAT
?<p>This value sets the Serial format of the Analog Audio Input being captured.
[
   ACAP_FORMAT_LEFT_JUST = 0
   ACAP_FORMAT_RIGHT_JUST = 1
   ACAP_FORMAT_I2S = 2
   CFG_DEFAULT = ACAP_FORMAT_I2S
]

CFG_KEY = ACAP_NUM_BITS
?<p>This value sets the Data Width of the Analog Audio Input being caputred.
[
   ?<p>These are some commonly used sample sizes. Feel free to add to here.
   ACAP_NUM_BITS_16 = 0
   ACAP_NUM_BITS_18 = 2
   ACAP_NUM_BITS_20 = 4
   CFG_DEFAULT = ACAP_NUM_BITS_18
]

?<tr><td colspan=4><font size="+1"><center><b>Power Control Options</b></center></font></td></tr>

# *********************
# * USB Power Control *
# *********************
CFG_KEY = USB_POWER_ENABLE
?<p>This parameter determines how power to the USB port is controlled.
[
  ALWAYS_ON        = 1
  KLONDIKE_CONTROL = 2
  CFG_DEFAULT      = KLONDIKE_CONTROL 
]

# *********************
# * I2C EEPROM Device *
# *********************

?<tr><td colspan=4><font size="+1"><center><b>EEPROM Configuration Options</b></center></font></td></tr>

CFG_KEY = EEPROM_TYPE
?<p>This parameter defines the type of I2C EEPROM device (if any) that is 
?populated on the IRD.
[
  EEPROM_512B = 1
  EEPROM_16KB = 2
  EEPROM_32KB = 3
  CFG_DEFAULT = EEPROM_16KB
  ?<p>The value NOT_PRESENT is also valid for this key
]
  
# *****************************
# * Serial Port Configuration *
# *****************************
?<tr><td colspan=4><font size="+1"><center><b>Serial Port and Debug Trace Options</b></center></font></td></tr>

CFG_KEY = SERIAL1
?<p>This parameter indicates which internal or external UART should be considered
?as the first serial port in the system.
[
  UART_NONE        = 0
  INTERNAL_UART1   = 1
  INTERNAL_UART2   = 2
  INTERNAL_UART3   = 3
  TELEGRAPH_UART1  = 4
  TELEGRAPH_UART2  = 5
  ISA_UART         = 6     
  ?(Dual-UART ISA card used for emulation.)
  CFG_DEFAULT      = INTERNAL_UART3
]  

CFG_KEY = SERIAL2
?<p>This parameter indicates which UART should be considered the second 
?UART in the system
[
  ?<p>Valid values here are as for SERIAL1.
  CFG_DEFAULT      = UART_NONE
]  

CFG_KEY = SERIAL2_CM_MPEG_OWNER
?<p>This parameter indicates either CM or MPEG owns the second UART 
?if a second UART in the system
[
  SERIAL2_OWNER_CM     = 1
  SERIAL2_OWNER_MPEG   = 2
  ?<p>Valid values here are as for SERIAL1.
  CFG_DEFAULT      = SERIAL2_OWNER_MPEG
]  

CFG_KEY = TRACE_PORT
?<p>This parameter defines the serial port or other communications channel that is 
?used to transmit debug trace messages. 
[
  ?<p>Any value in the valid list for SERIAL1 is valid here along with the 
  ?following two values which are specific to TRACE_PORT:<br>
  TRACE_MULTIICE = 7
  TRACE_ETHERNET = 8
  TRACE_MEMORY   = 9
  CFG_DEFAULT    = SERIAL1
]  

CFG_KEY = REDIRECTOR_PORT
?<p>This parameter selects the serial port used in the modem redirector test.
[
  ?<p>Valid values here are as for SERIAL1.
  CFG_DEFAULT = TELEGRAPH_UART1
]

# *****************
# * GPIO Extender *
# *****************
?<tr><td colspan=4><font size="+1"><center><b>GPIO Extender Options</b></center></font></td></tr>

CFG_KEY = CNXT_PIO_EXP_TYPE
?<p>This parameter defines the type of GPIO extender (if any) installed in the target IRD.
[
  GPIO_EXTEND_IIC = 1
  GPIO_EXTEND_IO  = 2
  ?NOT_PRESENT is also valid
  CFG_DEFAULT     = GPIO_EXTEND_IIC
]

CFG_KEY = CNXT_PIO_EXP_REG
?<p>This parameter defines the address of the first IO-connected GPIO expander 
? device in systems which include it.
[
   ?<p>A IO-bus valid address or NOT_PRESENT if not populated.
   CFG_DEFAULT = (-1)
]

CFG_KEY = CNXT_PIO_EXP_REG_2
?<p>This parameter defines the address of the second IO-connected GPIO expander 
? device in systems which include it.
[
   ?<p>A IO-bus valid address or NOT_PRESENT if not populated.
   CFG_DEFAULT = (-1)
]

# **********************
# * Front Panel Keypad *
# **********************
?<tr><td colspan=4><font size="+1"><center><b>Front Panel Keypad Options</b></center></font></td></tr>

CFG_KEY = FRONT_PANEL_KEYPAD_TYPE
?<p>This parameter allows you to select between different keypad implementations 
? including a 3x3 scan matrix and a basic GPIO button keypad.
[
  FRONT_PANEL_KEYPAD_LEGACY        = 0
  FRONT_PANEL_KEYPAD_KLONDIKE      = 1
  FRONT_PANEL_KEYPAD_ABILENE       = 2
  FRONT_PANEL_KEYPAD_ATHENS        = 3
  FRONT_PANEL_KEYPAD_HAPPY         = 5
  FRONT_PANEL_KEYPAD_VEND_D_PROD_1 = 6
  FRONT_PANEL_KEYPAD_BRADY         = 7
  FRONT_PANEL_KEYPAD_BURNET        = 8
  FRONT_PANEL_KEYPAD_BRONCO        = 9
  FRONT_PANEL_KEYPAD_NONE          = 10
  FRONT_PANEL_KEYPAD_EUREKA        = 11
  FRONT_PANEL_KEYPAD_CROSBY        = 12
  FRONT_PANEL_KEYPAD_PUDONG		  = 13
  FRONT_PANEL_KEYPAD_SDCFP         = 14
  FRONT_PANEL_KEYPAD_TONGDA        = 15
  CFG_DEFAULT                      = FRONT_PANEL_KEYPAD_LEGACY
]

CFG_KEY = FRONT_PANEL_KEYPAD_NUM_ROWS
?<p>Defines the number of rows in the front panel keypad scan matrix 
?(assuming the front panel is implemented using a scan matrix).
[
  ?<p>The value of this key should be an integer greater than 0. If the keypad type in use is not a scan matrix,
  ?this value is ignored and can be set to NOT_PRESENT. If it is desired to use the SCANBTNS driver with a simple
  ?GPIO button keypad, this value can be set to 1 and an unused GPIO assigned to PIO_FRONT_PANEL_KEYPAD_ROW_0. Then
  ?each button GPIO should be assigned to a different column and FRONT_PANEL_KEYPAD_NUM_COLS set to the number of
  ?buttons.
  CFG_DEFAULT = 3
]

CFG_KEY = PIO_FRONT_PANEL_KEYPAD_ROW_0
?<p>This parameter defines the GPIO pin connected to the front panel keypad scan matrix, row 0
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(1+GPIO_DEVICE_ID_INTERNAL+GPIO_POSITIVE_POLARITY+GPIO_PIN_IS_OUTPUT)
]

CFG_KEY = PIO_FRONT_PANEL_KEYPAD_ROW_1
?<p>This parameter defines the GPIO pin connected to the front panel keypad scan matrix, row 1
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(2+GPIO_DEVICE_ID_INTERNAL+GPIO_POSITIVE_POLARITY+GPIO_PIN_IS_OUTPUT)
]

CFG_KEY = PIO_FRONT_PANEL_KEYPAD_ROW_2
?<p>This parameter defines the GPIO pin connected to the front panel keypad scan matrix, row 2
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(3+GPIO_DEVICE_ID_INTERNAL+GPIO_POSITIVE_POLARITY+GPIO_PIN_IS_OUTPUT)
]

CFG_KEY = FRONT_PANEL_KEYPAD_NUM_COLS
?<p>Defines the number of columns in the front panel keypad scan matrix 
?(assuming the front panel is implemented using a scan matrix).
[
  ?<p>The value of this key should be an integer greater than 0. If the keypad type in use is not a scan matrix,
  ?this value is ignored and can be set to NOT_PRESENT. If it is desired to use the SCANBTNS driver with a simple
  ?GPIO button keypad, this value can be set to the number of GPIO buttons. Then the GPIO associated with each button 
  ?should be assigned to a different column, FRONT_PANEL_KEYPAD_NUM_ROWS set to 1, and PIO_FRONT_PANEL_KEYPAD_ROW_0
  ?set to an unused GPIO.
  CFG_DEFAULT = 3
]

CFG_KEY = PIO_FRONT_PANEL_KEYPAD_COL_0
?<p>This parameter defines the GPIO pin connected to the front panel keypad scan matrix, column 0
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(4+GPIO_DEVICE_ID_INTERNAL+GPIO_POSITIVE_POLARITY+GPIO_PIN_IS_INPUT)
]

CFG_KEY = PIO_FRONT_PANEL_KEYPAD_COL_1
?<p>This parameter defines the GPIO pin connected to the front panel keypad scan matrix, column 1
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(5+GPIO_DEVICE_ID_INTERNAL+GPIO_POSITIVE_POLARITY+GPIO_PIN_IS_INPUT)
]

CFG_KEY = PIO_FRONT_PANEL_KEYPAD_COL_2
?<p>This parameter defines the GPIO pin connected to the front panel keypad scan matrix, column 2
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(6+GPIO_DEVICE_ID_INTERNAL+GPIO_POSITIVE_POLARITY+GPIO_PIN_IS_INPUT)
]

CFG_KEY = PIO_FRONT_PANEL_POWER_BUTTON
?<p>This parameter defines the GPIO pin connected to the front panel power button.
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=0
]

# ***************************************
# * Smartcard 0/1 Voltage configuration *
# ***************************************
?<tr><td colspan=4><font size="+1"><center><b>Smart Card Voltage Control Pins</b></center></font></td></tr>

CFG_KEY = PIO_SC0_VOLT_CTRL
?<p>This parameter defines the GPIO pin used to set the Smart Card 0's Voltage
? to 3.3V or 5V.
[
  ?<p> Currently on the ISA GPIO Bank
  CFG_DEFAULT = (3+GPIO_DEVICE_ID_ISA_1+GPIO_PIN_IS_OUTPUT+GPIO_POSITIVE_POLARITY)
]

CFG_KEY = PIO_SC1_VOLT_CTRL
?<p>This parameter defines the GPIO pin used to set the Smart Card 1's Voltage
? to 3.3V or 5V.
[
  ?<p> Currently on the ISA GPIO Bank
  CFG_DEFAULT = (4+GPIO_DEVICE_ID_ISA_1+GPIO_PIN_IS_OUTPUT+GPIO_POSITIVE_POLARITY)
]

# ********************
# * Front Panel LEDs *
# ********************
?<tr><td colspan=4><font size="+1"><center><b>Front Panel LED Options</b></center></font></td></tr>

CFG_KEY = NUMBER_OF_LEDS
?<p>This parameter defines the number of front panel LEDs on the target IRD. For each
? populated LED, define the LED using a PIO_LED_xxx label (below) and also include an
? alias PIO_LED_n in the target hardware config file to allow the LED driver to find
? the individual connections.
[
  ?<p>The number of LEDs on the target IRD.
  CFG_DEFAULT=4
]

CFG_KEY = PIO_LED_POWER
?<p>This parameter defines the GPIO pin connected to the "On/Standby" LED if this exists.
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(0+GPIO_DEVICE_ID_INTERNAL+GPIO_NEGATIVE_POLARITY+GPIO_PIN_IS_OUTPUT)
]

CFG_KEY = PIO_LED_IR_MSG
?<p>This parameter defines the GPIO pin connected to the "IR Received" LED if this exists 
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(7+GPIO_DEVICE_ID_INTERNAL +GPIO_NEGATIVE_POLARITY+GPIO_PIN_IS_OUTPUT)
]

CFG_KEY = PIO_LED_ONLINE
?<p>This parameter defines the GPIO pin connected to the "Modem Online" LED if this exists 
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(0+GPIO_DEVICE_ID_I2C_2+GPIO_NEGATIVE_POLARITY+GPIO_PIN_IS_OUTPUT)
]

CFG_KEY = PIO_LED_ONLINE_MSG
?<p>This parameter defines the GPIO pin connected to the "Online Message" LED if this exists 
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=(24+GPIO_DEVICE_ID_INTERNAL+GPIO_NEGATIVE_POLARITY+GPIO_PIN_IS_OUTPUT+GPIO_DEVICE_FLAG_PWM)
]

CFG_KEY = PIO_LED_DOWNSTREAM_MSG
?<p>This parameter defines the GPIO pin connected to the "Downstream Message" LED if this exists 
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_LED_UPSTREAM_MSG
?<p>This parameter defines the GPIO pin connected to the "Upstream Message" LED if this exists 
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_LED_HARD_DISK
?<p>This parameter defines the GPIO pin connected to the "Hard Disk" LED if this exists 
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

#######################
# LNB Control Options #
#######################
?<tr><td colspan=4><font size="+1"><center><b>LNB Control Options</b></center></font></td></tr>

CFG_KEY = LNB_22KHZ_CONTROL
?<p>This parameter defines how the internal signalling for the 22KHz LNB tone is accomplished.  The internal signal may be either an enable/disable or the presence/absence of an actual 22KHz tone.
[
  LNB_22KHZ_ENABLE = 0
  LNB_22KHZ_TONE   = 1
  CFG_DEFAULT=LNB_22KHZ_ENABLE
]

CFG_KEY = PIO_LNB_ENABLE
?<p>This parameter defines the GPIO pin connected to the LNB enable line if it exists.
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_LNB_22KHZ_DIRECTION
?<p>This parameter defines the GPIO pin used for direction control of the 22KHz signal if it exists.
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

# ********************
# * SCART Controller *
# ********************
?<tr><td colspan=4><font size="+1"><center><b>SCART Controller Options</b></center></font></td></tr>
CFG_KEY = SCART_TYPE
?<p>This parameter selects the type of SCART controller (if any) installed in the target IRD.
[
  SCART_TYPE_LEGACY          = 0
  SCART_TYPE_NONE            = 1
  SCART_TYPE_TDK_AVPRO_5002B = 2
  SCART_TYPE_SONY_CXA2161R   = 3
  SCART_TYPE_BRADY           = 4
  SCART_TYPE_CROSBY          = 5
  SCART_TYPE_ST_STV6412A     = 6
  CFG_DEFAULT                = SCART_TYPE_TDK_AVPRO_5002B
]

# ***********************************************************
# * RF Modulator (internal, but depends on external circuit *
# * This config key defines if the external circuit is      *
# * available.  If so then the driver will be built.        *
# ***********************************************************

?<tr><td colspan=4><font size="+1"><center><b>RF Modulator Options</b></center></font></td></tr>

CFG_KEY = RF_MODULATOR
?<p>This parameter controls if the RF modulator driver is built.  This
? should be set to YES if the IRD has an RF modulator circuit populated.
[
  ?<p>The default is set as NO.
  CFG_DEFAULT = NO
]
# RF Modulator Output Enable GPIO pins definitions 

CFG_KEY = PIO_RFMOD_ENABLE
?<p>This parameter defines the GPIO pin that enables RF Modulator Output Mode 
[
  ?<p>The default is set to invalid value (-1).
  CFG_DEFAULT =  (-1)
]

# *************************
# * External RF Modulator *
# *************************

?<tr><td colspan=4><font size="+1"><center><b>RF Modulator Options</b></center></font></td></tr>

CFG_KEY = EXT_RF_MODULATOR_TYPE
?<p>This parameter selects the type of External RF Modulator (if any) installed in the target IRD.
[
  EXT_RFMOD_TYPE_NONE              = 0
  EXT_RFMOD_TYPE_SHARP_VT5F1YT0005 = 1
  CFG_DEFAULT                      = EXT_RFMOD_TYPE_NONE
]

# ***************
# * PCI IO Mode *
# ***************
?<tr><td colspan=4><font size="+1"><center><b>PCI Configuration Options</b></center></font></td></tr>

CFG_KEY = EXTERNAL_PCI_IO_MODE
?<p><b><i>To be completed</i></b>
[
  ?<p><i><b>What is this and what values can it take?</b></i>
  CFG_DEFAULT = AUTOSENSE
]

# *********************************
# * Transport Stream Multiplexing *
# *********************************
?<tr><td colspan=4><font size="+1"><center><b>Transport Stream Multiplexing/Input Options</b></center></font></td></tr>

MAX_EXT_TS_SOURCES = 4

CFG_KEY = TS_MUX_TYPE
?<p>This parameter sets the transport stream muxing model used in the target IRD.
[
  TS_MUX_TYPE_KLONDIKE    = 0
  TS_MUX_TYPE_ABILENE     = 1
  TS_MUX_TYPE_ATHENS      = 2
  TS_MUX_TYPE_VENDA_PROD1 = 3
  TS_MUX_TYPE_VENDD_PROD1 = 4
  TS_MUX_TYPE_BRADY       = 5  
  TS_MUX_TYPE_BRONCO      = 6
  TS_MUX_TYPE_BRONCO_R3   = 7
  TS_MUX_TYPE_MILANO      = 8
  TS_MUX_TYPE_NONE        = 127
  CFG_DEFAULT             = TS_MUX_TYPE_KLONDIKE
]

CFG_KEY = EXTERNAL_TS_SRC0
?<p>This key is used in the transport stream muxing driver. It defines the input connected to HSDP0 on the chip.
[
  EXT_TS_SRC_SAT_24106_24110    = 1 
  EXT_TS_SRC_SAT_24121_24130    = 2 
  EXT_TS_SRC_CAB_24943          = 3 
  EXT_TS_SRC_CAB_24430          = 4 
  EXT_TS_SRC_BASEBAND_OTV       = 5 
  EXT_TS_SRC_BASEBAND_DVB       = 6 
  EXT_TS_SRC_CI                 = 7 
  EXT_TS_SRC_1394               = 8 
  EXT_TS_SRC_SAT_CX2415X        = 9
  EXT_TS_SRC_TER_CX22702_TDLB7  = 10
  EXT_TS_SRC_TER_CX22702_T7575  = 11
  EXT_TS_SRC_TER_CX22702_T7579  = 12
  EXT_TS_SRC_TER_CX22702_T7580  = 13
  EXT_TS_SRC_CAB_DCF8722        = 14
  EXT_TS_SRC_GX1001_V35         = 15
  CFG_DEFAULT                   = EXT_TS_SRC_BASEBAND_DVB
]

CFG_KEY = EXTERNAL_TS_SRC1
?<p>This key is used in the transport stream muxing driver. It defines the input connected to HSDP1 on the chip.
[
  ?<p>Valid keys are as for EXTERNAL_TS_SRC0
  CFG_DEFAULT = EXT_TS_SRC_BASEBAND_OTV
]

CFG_KEY = EXTERNAL_TS_SRC2
?<p>This key is used in the transport stream muxing driver. It defines the input connected to HSDP2 on the chip.
[
  ?<p>Valid keys are as for EXTERNAL_TS_SRC0  
  CFG_DEFAULT = NOT_PRESENT
]

CFG_KEY = EXTERNAL_TS_SRC3
?<p>This key is used in the transport stream muxing driver. It defines the input connected to HSDP3 on the chip.
[
  ?<p>Valid keys are as for EXTERNAL_TS_SRC0  
  CFG_DEFAULT = NOT_PRESENT
]

# *********************
# * Crystal Frequency *
# *********************
?<tr><td colspan=4><font size="+1"><center><b>Crystal and Clock Frequency Options</b></center></font></td></tr>

CFG_KEY = CRYSTAL_FREQUENCY
?<p>This parameter sets the basic crystal frequency used to drive the MPEG controller on the target IRD.
[
  ?<p>This key should be set to the system crystal frequency in hertz.  
  CFG_DEFAULT = 14318180
]

# *********************
# * OOB IF Frequency  *
# *********************
?<tr><td colspan=4><font size="+1"><center><b>OOB IF Frequency Options</b></center></font></td></tr>

CFG_KEY = OOB_IF_FREQUENCY
?<p>This parameter sets the value of OOB IF frequency used and it depends upon the Crystal used.
[
  ?<p>This key should be set to the OOB IF frequency in hertz.
  ? Valid values are: 
  ? 36150000 for EURO and
  ? 44000000 for NA  
  CFG_DEFAULT = 36150000
]

CFG_KEY = IB_IF_FREQUENCY
?<p>This parameter sets the value of IB IF frequency used and it depends upon the Tuner SAW filter used.
[
  ?<p>This key should be set to the IB IF frequency in hertz.
  ? Valid values are: 
  ? 36150000 for EURO and
  ? 44000000 or 43750000 for NA  
  CFG_DEFAULT = 36150000
]


CFG_KEY = CABLE_MODEM_TUNER_TYPE
?<p>This parameter selects the type of tuner in use with the cable modem in the target IRD.
[
  CABLE_MODEM_TUNER_TYPE_NONE          = NOT_PRESENT
  CABLE_MODEM_TUNER_TYPE_TEMIC_4706PH5 = 1
  CABLE_MODEM_TUNER_TYPE_TEMIC_4736PY5 = 2
  CABLE_MODEM_TUNER_TYPE_PUNCH         = 3 
  CABLE_MODEM_TUNER_TYPE_MICROTUNE     = 4
  CFG_DEFAULT                          = CABLE_MODEM_TUNER_TYPE_NONE
]

CFG_KEY = MPEG_VIDEO_TUNER_TYPE
?<p>This parameter selects the type of tuner in use by the IB (video) QAM Demod.  This will most likely match the cable modem tuner type.
[
  MPEG_VIDEO_TUNER_TYPE_NONE          = NOT_PRESENT
  MPEG_VIDEO_TUNER_TYPE_TEMIC_4706PH5 = 1
  MPEG_VIDEO_TUNER_TYPE_TEMIC_4736PY5 = 2
  MPEG_VIDEO_TUNER_TYPE_PUNCH         = 3 
  MPEG_VIDEO_TUNER_TYPE_MICROTUNE     = 4
  CFG_DEFAULT                          = MPEG_VIDEO_TUNER_TYPE_NONE
]


CFG_KEY = QAM_DEMOD_IF_TYPE
?<p><i><b>IF Type refers to the intermediate frequency in use.  Euro implies an IF frequency of 36.15MHz.  NA (North American) implies an IF of 44.0 MHz.</b></i>
[
  QAM_DEMOD_IF_TYPE_NONE = 0
  QAM_DEMOD_IF_TYPE_EURO = 1
  QAM_DEMOD_IF_TYPE_NA   = 2  
  CFG_DEFAULT            = QAM_DEMOD_IF_TYPE_NONE
]           

CFG_KEY = CM_IMG_PREFIX
? <p>This parameter selects which board's cable modem image to load.  
? This definition needs to be in place when the SWCONFIG options DOCSIS or 
? DVS167_nW are set. When building the image, the cable modem image filename 
? will be generated by taking this prefix, concatenating the IF type,
? and the cable modem type.
[
  ? These are arbitrary values.  Assembly files need values to assign
  ? to the symbol but makefiles just go by the text of the label (which
  ? is the intended purpose).
  SPARTA = 0x59A47A
  MILANO = 0x311A90

  ? Sparta was chosen arbitrarily as the default CM image type
  CFG_DEFAULT = SPARTA
]

CFG_KEY = DAC_PLL_REG_VALUE
?<p>This parameter sets the value of the DAC PLL control register in the Wabash class of devices.
[
  ?<p>This key should be set to the value which should be written to the register on startup.
  ? A value of zero (the default) means do not write the register.  
  CFG_DEFAULT = 0
]



# *****************
# * Dial-up modem *
# *****************
?<tr><td colspan=4><font size="+1"><center><b>Dial-up Modem Options</b></center></font></td></tr>
CFG_KEY = MODEM_HW_TYPE
?<p>This key defines the type of POTS modem installed in the IRD (if any).
?
? An EXTERNAL_SERIAL_MODEM can be either SERIAL connected (to one of the
? built-in UARTS, or it can be HOST connected to the ISA-Like host interface,
? and be accessed much like an external UART.
?
? An INTERNAL_SMARTMDP_MODEM is the SmartMDP (P93) datapump, which is HOST
? connected.
?
? An INTERNAL_SMARTDAA_MODEM is a full SOFT modem, using the STB chip's built-in
? SmartDAA interface.
[
  EXTERNAL_SERIAL_MODEM = 1
  INTERNAL_SMARTMDP_MODEM = 2
  INTERNAL_SMARTDAA_MODEM = 3
  CFG_DEFAULT = HW_NONE
]             

CFG_KEY = MODEM_PORT
?<p>For an EXTERNAL_SERIAL_MODEM, this key defines which port the modem is
? connected to.  For other modem types, this key is ignored.
[
  ?<p>Any value in the valid list for SERIAL1 is valid here along with the 
  ? following values which are specific to MODEM_PORT:<br>
  HOST_CONNECTED_UART = 20
  CFG_DEFAULT = UART_NONE
]             

CFG_KEY = MODEM_HOST_RESET
?<p>This parameter defines the GPIO pin connected to the RESET line for a HOST
? connected modem (EXTERNAL_SERIAL_MODEM/HOST_CONNECTED or INTERNAL_SMARTMDP_MODEM)
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = MODEM_HOST_RESET2
?<p>On new BRONCO boxes, there are two host-connected modems.  The software is the
? same for both, but the reset lines are differnt.  This parameter will define the
? additional reset line.  On older BRONCO boxes, this is connected to the SMARTMDP
? modem and should be OK if we assert/de-assert RESET.
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = MODEM_HOST_INTERRUPT
?<p>This parameter defines the GPIO pin connected to the INTERRUPT line for a HOST
? connected modem (EXTERNAL_SERIAL_MODEM/HOST_CONNECTED or INTERNAL_SMARTMDP_MODEM)
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = MODEM_HOST_MEMBASE
?<p>This parameter defines the IO Memory Base Address for a HOST connected modem
? (EXTERNAL_SERIAL_MODEM/HOST_CONNECTED or INTERNAL_SMARTMDP_MODEM)
[
  ?<p>A hard-coded value that must match definition in BD_CNXT.C
  CFG_DEFAULT=NOT_PRESENT
]

CFG_KEY = PLL_CLK_OBSERVATION_REG_DEFAULT
?<p>This parameter is used to set the default value of CLK_OBSERVATION_REG for Brazos revB.
[
   ?<p>A valid value to select clock values driven on various pins, mainly used for VXX and MDP modem clocks or NOT_DETERMINED if not yet determined.
  CFG_DEFAULT            = NOT_DETERMINED
]

CFG_KEY = MODEM_SW_TYPE
?<p>This parameter is used to define the specific SW modem type
? It is being added as a software configuration option, because the same
? hardware should be able to support any of the given SOFTMODEM options.
?
? FLIPPER_V22B_MODEM is the original V.22bis Softmodem developed by Sandeep
? Rajpal(NB, now with Mindspeed), Dave Moore(Austin), and others.
?
? CORSICA_... is the new softmodem code being developed in Israel (PCDI) based
? on the ORCA datapump, the OCTOPUS controller code, and the SOAR SmartDAA
? driver code.  The variations of the Corsica modem represent potential
? build options for the modem, depending on whether we need low-speed, etc.
? Currently (Feb 2004) the V.34 option is the targeted option, with plans for
? adding V.90 (and/or V.92) support.  The V.22bis options has not yet been
? implemented, but should simply be a sub-set of the current Corsica project.
[
  FLIPPER_V22B_MODEM = 1
  CORSICA_V34_MODEM = 2
  CFG_DEFAULT = FLIPPER_V22B_MODEM
]

# ******************************
# * Smart card voltage control *
# ******************************
?<tr><td colspan=4><font size="+1"><center><b>SmartCard Options</b></center></font></td></tr>
CFG_KEY = SMC_VOLT_CTRL
?<p>This key defines whether smart card voltage is controlled by means 
?other than the TDA8004 (such as the GPIO expander).
[
  SMC_VOLT_CTRL_STD = 0
  SMC_VOLT_CTRL_EXT = 1
  SMC_VOLT_CTRL_EUREKA = 2
  CFG_DEFAULT = SMC_VOLT_CTRL_STD
]

# ********************************
# * Smart card hardware settings *
# ********************************
?<tr><td colspan=4><font size="+1"><center><b>SmartCard Slot 0 Options</b></center></font></td></tr>
CFG_KEY = SMC_SLOT0
?<p>This key defines which smart card controller Smart Card Slot 0 should use (if present)
[
  SMC_CONTROLLER0 = 0 
  SMC_CONTROLLER1 = 1  
  SMC_NONE        = -1     
  CFG_DEFAULT = SMC_CONTROLLER0
]

?<tr><td colspan=4><font size="+1"><center><b>SmartCard Slot 1 Options</b></center></font></td></tr>
CFG_KEY = SMC_SLOT1
?<p>This key defines which smart card controller Smart Card Slot 1 should use (if present)
[
  ?<p>Slot 1 defaults to controller 1 (uses definitions from SMC_SLOT0)
  CFG_DEFAULT = SMC_CONTROLLER1
]

# **********************************
# * POD module pin signal settings *
# **********************************
?<tr><td colspan=4><font size="+1"><center><b>POD module pin signal settings</b></center></font></td></tr>
CFG_KEY = DESCRIPTOR_NUM
?<p>This key defines the Descriptor slot to use for POD module
[
  ?<p>A8 or CRX.
  CNXT_POD_GPIO95 = 95  
  ?<p>A9 or DRX.
  CNXT_POD_GPIO94 = 94  
  ?<p>A4 or CTX.
  CNXT_POD_GPIO93 = 93  
  ?<p>A6 or ETX.
  CNXT_POD_GPIO92 = 92  
  ?<p>A5 or ITX.
  CNXT_POD_GPIO91 = 91  
  ?<p>A7 or QTX.
  CNXT_POD_GPIO90 = 90             
  ?<p>Card Detect 2 for SPARTA.
  CNXT_POD_GPIO89 = 89  
  ?<p>Voltage Sense 1 for SPARTA.
  CNXT_POD_GPIO78 = 78  
  ?<p>Card Detect 1 for SPARTA.
  CNXT_POD_GPIO69 = 69  
  ?<p>Voltage Sense 2 for SPARTA.
  CNXT_POD_GPIO67 = 67  
  ?<p>Normal PC CARD A14 for SPARTA.
  CNXT_POD_GPIO55 = 55  
  ?<p>Card Detect 2 for MILANO.
  CNXT_POD_GPIO54 = 54  
  ?<p>Card Detect 1 for MILANO.
  CNXT_POD_GPIO53 = 53  
  ?<p>Voltage Sense 2 for MILANO.
  CNXT_POD_GPIO72 = 72  
  ?<p>Voltage Sense 1 for MILANO.
  CNXT_POD_GPIO71 = 71  
  ?<p>Normal PC CARD A49 for MILANO.
  CNXT_POD_GPIO49 = 49  
  ?<p>Card Intrrupt REQ/READY for MILANO.
  CNXT_POD_GPIO48 = 48  
  ?<p>Select PIN for VppENA for MILANO.
  CNXT_POD_GPIO52 = 52  
  ?<p>PC CARD Reset for MILANO.
  CNXT_POD_GPIO43 = 43  
  ?<p>Card Intrrupt REQ/READY for SPARTA.
  CNXT_POD_GPIO27 = 27  
  ?<p>PC CARD Reset for SPARTA.
  CNXT_POD_GPIO25 = 25  
  ?<p>Select PIN for VppENA for SPARTA.
  CNXT_POD_GPIO28 = 28  
  CFG_DEFAULT = 7
]

CFG_KEY = CE1_CHIP_SELECT
?<p>This key defines the pin of CE1 Chip Select for POD module
[
  ?<p>CE1 Chip Select.
  CFG_DEFAULT = 3
]

CFG_KEY = CE2_CHIP_SELECT
?<p>This key defines the pin of CE2 Chip Select for POD module
[
  SPARTA_CE2_CHIP_SELECT = 5
  MILANO_CE2_CHIP_SELECT = 4
  CFG_DEFAULT = SPARTA_CE2_CHIP_SELECT
]

CFG_KEY = CARD_DETECT1_GPIO
?<p>This key defines the pin of Card Detect1 GPIO for POD module
[
  SPARTA_CARD_DETECT1_GPIO = CNXT_POD_GPIO69
  MILANO_CARD_DETECT1_GPIO = CNXT_POD_GPIO53
  CFG_DEFAULT = SPARTA_CARD_DETECT1_GPIO
]

CFG_KEY = CARD_DETECT2_GPIO
?<p>This key defines the pin of Card Detect2 GPIO for POD module
[
  SPARTA_CARD_DETECT2_GPIO = CNXT_POD_GPIO89
  MILANO_CARD_DETECT2_GPIO = CNXT_POD_GPIO54
  CFG_DEFAULT = SPARTA_CARD_DETECT2_GPIO
]

CFG_KEY = READ_REQUEST_GPIO
?<p>This key defines the pin of Ready/IREQ GPIO for POD module
[
  SPARTA_READ_REQUEST_GPIO = CNXT_POD_GPIO27
  MILANO_READ_REQUEST_GPIO = CNXT_POD_GPIO48
  CFG_DEFAULT = SPARTA_READ_REQUEST_GPIO
]

CFG_KEY = RESET_GPIO
?<p>This key defines the pin of Reset GPIO for POD module
[
  SPARTA_RESET_GPIO = CNXT_POD_GPIO25
  MILANO_RESET_GPIO = CNXT_POD_GPIO43
  CFG_DEFAULT = SPARTA_RESET_GPIO
]

CFG_KEY = VOLTAGE_SENSE1_GPIO
?<p>This key defines the pin of Voltage Sense 1 GPIO for POD module
[
  SPARTA_VOLTAGE_SENSE1_GPIO = CNXT_POD_GPIO78
  MILANO_VOLTAGE_SENSE1_GPIO = CNXT_POD_GPIO71
  CFG_DEFAULT = SPARTA_VOLTAGE_SENSE1_GPIO
]

CFG_KEY = VOLTAGE_SENSE2_GPIO
?<p>This key defines the pin of Voltage Sense 2 GPIO for POD module
[
  SPARTA_VOLTAGE_SENSE2_GPIO = CNXT_POD_GPIO67
  MILANO_VOLTAGE_SENSE2_GPIO = CNXT_POD_GPIO72
  CFG_DEFAULT = SPARTA_VOLTAGE_SENSE2_GPIO
]

CFG_KEY = USE_XOE
?<p>This key defines the pin of Want XOE for POD module
[
  ?<p>Want XOE for POD.
  CFG_DEFAULT = 1
]

CFG_KEY = Alt_POD_PIO
?<p>This key defines the pin of Alt POD PIO for POD module
[
  SPARTA_Alt_POD_PIO = 0
  MILANO_Alt_POD_PIO = 1
  CFG_DEFAULT = SPARTA_Alt_POD_PIO
]

CFG_KEY = A4_PIO50
?<p>This key defines the pin of A4PIO50 for POD module
[
  SPARTA_A4_PIO50 = 0
  MILANO_A4_PIO50 = 1
  CFG_DEFAULT = SPARTA_A4_PIO50
]

CFG_KEY = Alt_IO_RW
?<p>This key defines the pin of Alt IO R/W for POD module
[
  ?<p>Alt IO R/W.
  CFG_DEFAULT = 0
]

CFG_KEY = VPP_ENABLE_GPIO
?<p>This key defines the pin of Selected PIN for VppENA for POD module
[
  SPARTA_VPP_ENABLE_GPIO = CNXT_POD_GPIO28
  MILANO_VPP_ENABLE_GPIO = CNXT_POD_GPIO52
  CFG_DEFAULT = SPARTA_VPP_ENABLE_GPIO
]

CFG_KEY = ALT_A14_GPIO
?<p>This key defines the pin of Normal PC Card A14 signal for POD module
[
  SPARTA_ALT_A14_GPIO = CNXT_POD_GPIO55
  MILANO_ALT_A14_GPIO = CNXT_POD_GPIO49
  CFG_DEFAULT = SPARTA_ALT_A14_GPIO
]

# **********************************
# * Chip revision and test options *
# **********************************
?<tr><td colspan=4><font size="+1"><center><b>Chip Revision and Test Options</b></center></font></td></tr>
CFG_KEY = CHIP_REV
?<p>Software will usually build to target all production revisions of a given 
?chip and include any necessary workarounds based upon a runtime version query. 
?In some cases, however ,code size may be reduced by targetting a specific 
?revision of the chip. To do this, set the revision in this key.
[
  REV_A_COLO    = 0    
  REV_B_COLO    = 1    
  REV_C_COLO    = 2    
  REV_F_COLO    = 4    
  REV_A_HONDO   = 0    
  REV_A_WABASH  = 0    
  REV_B_WABASH  = 1    
  REV_A_BRAZOS  = 0    
  REV_B_BRAZOS  = 1    
  CFG_DEFAULT = AUTOSENSE
]

# ******************
# * I2C Bus Speeds *
# ******************
?<tr><td colspan=4><font size="+1"><center><b>I2C Bus Configuration Options</b></center></font></td></tr>

CFG_KEY = I2C_BUS_0_SPEED
?<p>This parameter sets the operating speed of the MPEG controller's first I<sup>2</sup>C bus.
[
  I2C_SPEED_100KHZ = 0
  I2C_SPEED_400KHZ = 1
  CFG_DEFAULT      = I2C_SPEED_100KHZ
]
              
CFG_KEY = I2C_BUS_1_SPEED
?<p>This parameter sets the operating speed of the MPEG controller's second I<sup>2</sup>C bus 
?(if relevant for the controller in use).
[
  ?<p>Valid values are as for I2C_BUS_0_SPEED.
  CFG_DEFAULT      = I2C_SPEED_100KHZ
]
              
# *******************************************
# * Device I2C Addresses and Bus Connection *
# *******************************************

?<tr><td colspan=4><font size="+1"><center><b>I2C Device Addresses and Bus Connections</b></center></font></td></tr>

CFG_KEY = I2C_ADDR_CX24121
?<p>I<sup>2</sup>C address of CX24121 compatible satellite demod.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0x6A
]  

CFG_KEY = I2C_ADDR_CX24121_DSS
?<p>I<sup>2</sup>C address of CX24121 compatible satellite demod configured for DSS.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xEA
]  

CFG_KEY = I2C_BUS_CX24121
?<p>I<sup>2</sup>C bus to which the CXA24121 NIM is attached.
[
  I2C_BUS_NONE = 0
  I2C_BUS_0    = 1
  I2C_BUS_1    = 2
  CFG_DEFAULT  = I2C_BUS_0
]  

CFG_KEY = I2C_ADDR_CAMARO
?<p>I<sup>2</sup>C address of CX24121 compatible on-board satellite demod.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xAA
]  

CFG_KEY = I2C_BUS_CAMARO
?<p>I<sup>2</sup>C bus to which the on-board Camaro demod is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT  = I2C_BUS_0
]  

CFG_KEY = CAMARO_ACCESS_METHOD
?<p>The method used to access the on-board demod. The default method is set 
?to REGISTER_WORKAROUND which will use pure register access if the chip does 
?not have the register access bug, or the hybrid method if the chip does have 
?the bug.
[
  REGISTER_ONLY       = 0
  I2C_BUS_ONLY        = 1
  REGISTER_WORKAROUND = 2
  CFG_DEFAULT  = REGISTER_WORKAROUND
]  

CFG_KEY = I2C_ADDR_HM1221_1811 
?<p>I<sup>2</sup>C address of HM1221/1811 satellite NIM.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xAE
]  

CFG_KEY = I2C_BUS_HM1221_1811
?<p>I<sup>2</sup>C bus to which the HM1221/1811 NIM is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  

CFG_KEY = I2C_ADDR_HM1221_SER  
?<p>I<sup>2</sup>C address of a serially-attached HM1221 satellite demodulator. On the Klondike reference IRD, it 
? is possible to attach the NIM using either serial or parallel connection. The connection type is determined by
? by software which checks to see which I<sup>2</sup>C address is in use.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xA8
]

CFG_KEY = I2C_BUS_HM1221_SER
?<p>I<sup>2</sup>C bus to which the HM1221 serial NIM is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  

CFG_KEY = I2C_ADDR_HM1221_PAR  
?<p>I<sup>2</sup>C address of parallel-attached HM1221 satellite demodulator. On the Klondike reference IRD, it 
? is possible to attach the NIM using either serial or parallel connection. The connection type is determined by
? by software which checks to see which I<sup>2</sup>C address is in use.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xAE
]

CFG_KEY = I2C_BUS_HM1221_PAR
?<p>I<sup>2</sup>C bus to which the HM1221 parallel NIM is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  

CFG_KEY = I2C_ADDR_HM1221_SER0 
?<p>I<sup>2</sup>C address of first serially-attached HM1221 satellite demodulator in systems which may have
? more than one satellite NIM installed.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xAE 
]

CFG_KEY = I2C_BUS_HM1221_SER0
?<p>I<sup>2</sup>C bus to which the first HM1221 serial NIM is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  

CFG_KEY = I2C_ADDR_HM1221_SER1 
?<p>I<sup>2</sup>C Address of second serially-attached HM1221 satellite demodulator in systems which may have
? more than one satellite NIM installed.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xA8
]

CFG_KEY = I2C_BUS_HM1221_SER1
?<p>I<sup>2</sup>C bus to which the second HM1221 serial NIM is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_ADDR_BT861       
?<p>I<sup>2</sup>C address of the external Bt861 video encoder. 
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  ?<p>If the same as the Bt865 address, software will autodetect which encoder is installed.
  CFG_DEFAULT = 0x8A
]

CFG_KEY = I2C_BUS_BT861
?<p>I<sup>2</sup>C bus to which the Bt861 is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_ADDR_BT865       
?<p>I<sup>2</sup>C address of the external Bt865 video encoder.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  ?<p>If the same as the Bt861 address, software will autodetect which encoder is installed.
  CFG_DEFAULT = 0x8A
]
  

CFG_KEY = I2C_BUS_BT865
?<p>I<sup>2</sup>C bus to which the Bt865 is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_ADDR_AVPRO5002B  
?<p>I<sup>2</sup>C address of the TDK AVPro5002B SCART controller.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0x90
]

CFG_KEY = I2C_BUS_AVPRO5002B
?<p>I<sup>2</sup>C bus to which the TDK AVPro5002B is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  

CFG_KEY = I2C_ADDR_CXA2161R    
?<p>I<sup>2</sup>C address of the Sony CXA2161R SCART controller.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0x90 
]

CFG_KEY = I2C_BUS_CXA2161R
?<p>I<sup>2</sup>C bus to which the Sony SCART controller is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_ADDR_LCD_MATRIX  
?<p>I<sup>2</sup>C address of the front panel LCD matrix device.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0x5C
]
  

CFG_KEY = I2C_BUS_LCD_MATRIX
?<p>I<sup>2</sup>C bus to which the LCD matrix device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  

CFG_KEY = I2C_ADDR_RF_MOD      
?<p>I<sup>2</sup>C address of an external RF modulator
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xCA
]
  

CFG_KEY = I2C_BUS_RF_MOD
?<p>I<sup>2</sup>C bus to which the RF modulator is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_ADDR_EEPROM1     
?<p>I<sup>2</sup>C address of the first EEPROM device in the IRD.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xA0
]

CFG_KEY = I2C_BUS_EEPROM1
?<p>I<sup>2</sup>C bus to which the first EEPROM device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_ADDR_EEPROM2     
?<p>I<sup>2</sup>C address of the second EEPROM device in the IRD.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xA2
]
  
CFG_KEY = I2C_BUS_EEPROM2
?<p>I<sup>2</sup>C bus to which the second EEPROM device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_CONFIG_EEPROM_ADDR
?<p>I<sup>2</sup>C address of the EEPROM device containing configuration data.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = NOT_PRESENT
]

CFG_KEY = I2C_CONFIG_EEPROM_BUS
?<p>I<sup>2</sup>C bus on which the configuration EEPROM is located.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_NONE
]  

CFG_KEY = I2C_ADDR_EEPROM3
?<p>I<sup>2</sup>C address of the third EEPROM device in the IRD.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = NOT_PRESENT
]

CFG_KEY = I2C_BUS_EEPROM3
?<p>I<sup>2</sup>C bus to which the third EEPROM device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_NONE
]  
  
CFG_KEY = I2C_ADDR_GPIO2_EXT   
?<p>I<sup>2</sup>C address of the GPIO extender device.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0x72
]
  
CFG_KEY = I2C_BUS_GPIO2_EXT
?<p>I<sup>2</sup>C bus to which the GPIO extender deviceis attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_ADDR_NIM_EXT 
?<p>I<sup>2</sup>C address of the GPIO extender used to control NIM signalling.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0x70
]

CFG_KEY = I2C_BUS_NIM_EXT
?<p>I<sup>2</sup>C bus to which the NIM-signalling GPIO extender is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
 
CFG_KEY = I2C_ADDR_EEPROM_MDM  
?<p>I<sup>2</sup>C address of the EEPROM device on a Telegraph board (modem, serial, 
? ethernet adapter for Klondike reference IRDs) used by software to determine whether
? the board is populated with a SmartSCM or SmartMDP modem.

[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xA6
]

CFG_KEY = I2C_BUS_EEPROM_MDM
?<p>I<sup>2</sup>C bus to which the Telegraph modem EEPROM device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
   
CFG_KEY = I2C_ADDR_EEPROM_NADA
?<p>I<sup>2</sup>C address of the EEPROM device on the NADA smartcard daughter board 
? for Klondike reference IRDs. This device is intended to allow software to determine
? which type of daughterboard is populated (8004- or 8006-based).
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0xA4
]

CFG_KEY = I2C_BUS_EEPROM_NADA
?<p>I<sup>2</sup>C bus to which the NADA daughterboard EEPROM device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  
   
CFG_KEY = I2C_ADDR_BT829       
?<p>I<sup>2</sup>C address of the Bt829 video decoder.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = NOT_PRESENT
]

CFG_KEY = I2C_BUS_BT829
?<p>I<sup>2</sup>C bus to which the Bt829 device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_NONE
]  
    
CFG_KEY = I2C_ADDR_BT835       
?<p>I<sup>2</sup>C address of the Bt835 video decoder.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = NOT_PRESENT
]

CFG_KEY = I2C_BUS_BT835
?<p>I<sup>2</sup>C bus to which the Bt835 device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_NONE
]  

CFG_KEY = I2C_ADDR_CX22702
?<p>I<sup>2</sup>C address of the CX22702 terrestrial demodulator.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0x86
]

CFG_KEY = I2C_BUS_CX22702
?<p>I<sup>2</sup>C bus to which the CX22702 terrestrial demodulator is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_0
]  

CFG_KEY = I2C_ADDR_CX22702_TUNER_DEVICE
?<p>I<sup>2</sup>C address of the terrestrial tuner that is connected to the CX22702 terrestrial demodulator, Note this is always on the same bus as thhe CX22702.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT, the default is for a Thomson tuner can device.
  CFG_DEFAULT = 0xC0
]

CFG_KEY = I2C_ADDR_MAKO
?<p>I<sup>2</sup>C address of the MAKO analogue capture device.
[
  ?<p>Set to the device address [1-255] if present, otherwise set to NOT_PRESENT.
  CFG_DEFAULT = 0x88
]

CFG_KEY = I2C_BUS_MAKO
?<p>I<sup>2</sup>C bus to which the MAKO analogue capture device is attached.
[
  ?<p>I2C_BUS_NONE (0)<br>
  ?I2C_BUS_0 (1)<br>
  ?I2C_BUS_1 (2)
  CFG_DEFAULT = I2C_BUS_1
]

# *********************************************************************************
# * ISA Device Chip Select Customisation                                          *
# *********************************************************************************

?<tr><td colspan=4><font size="+1"><center><b>ISA Device Chip Select Customisation</b></center></font></td></tr>

CFG_KEY = ISA_CHIP_SELECT_1
?<p>This parameter allows customisation of the chip select signal used in addressing
? the first ISA device set up in the STARTUP component. See BD_CNXT.C for the array
? of descriptors for each configured ISA device. Default values are set to reflect
? existing Conexant reference designs (unless overridden in the specific configuration
? file for a particular IRD).
[
  ?<p>The chip select line to use for ISA device 1. Valid values are 2 through 5.
  CFG_DEFAULT = 4
]

CFG_KEY = ISA_CHIP_SELECT_2
?<p>This parameter allows customisation of the chip select signal used in addressing
? the second ISA device set up in the STARTUP component. See BD_CNXT.C for the array
? of descriptors for each configured ISA device.
[
  ?<p>The chip select line to use for ISA device 2. Valid values are 2 through 5.
  CFG_DEFAULT = 4
]

CFG_KEY = ISA_CHIP_SELECT_3
?<p>This parameter allows customisation of the chip select signal used in addressing
? the third ISA device set up in the STARTUP component. See BD_CNXT.C for the array
? of descriptors for each configured ISA device.
[
  ?<p>The chip select line to use for ISA device 3. Valid values are 2 through 5.
  CFG_DEFAULT = 5
]

CFG_KEY = ISA_CHIP_SELECT_4
?<p>This parameter allows customisation of the chip select signal used in addressing
? the fourth ISA device set up in the STARTUP component. See BD_CNXT.C for the array
? of descriptors for each configured ISA device.
[
  ?<p>The chip select line to use for ISA device 4. Valid values are 2 through 5.
  CFG_DEFAULT = 3
]



# *********************************************************************************
# * 1394 Device Customisation                                          *
# *********************************************************************************

?<tr><td colspan=4><font size="+1"><center><b>1394 Device Customisation</b></center></font></td></tr>

CFG_KEY = CNXT_FIREWIRE_DESCRIPTOR
?<p>This parameter allows customisation of the ISA Descriptor to use for interfacing
? with a 1394 device such as the TI part in the MILANO IRD. 
[
  ?<p>The chip descriptor to use for FIREWIRE. Valid values are 0 through 7.
  CFG_DEFAULT = 6
]


CFG_KEY = CNXT_FIREWIRE_CHIP_SELECT
?<p>This parameter allows customisation of the Chip Select to use for interfacing
? with a 1394 device such as the TI part in the MILANO IRD. 
[
  ?<p>The chip select line to use for ISA device 1. 
  CFG_DEFAULT = 5
]

CFG_KEY = CNXT_FIREWIRE_LLC_RESET_GPIO
?<p>This parameter allows customisation of the GPIO pin to use for interfacing with
? with LLC Reset signal on TI 1394 part.
[
  ?<p>The GPIO line to use for TI1394 LLC Reset Signal. 
  CFG_DEFAULT = 102
]

CFG_KEY = CNXT_FIREWIRE_ARM_RESET_GPIO
?<p>This parameter allows customisation of the GPIO pin to use for interfacing with
? ARM Reset signal on TI 1394 part.
[
  ?<p>The GPIO line to use for TI1394 ARM Reset Signal. 
  CFG_DEFAULT = 103 
]

CFG_KEY = FIREWIRE_DRIVER_INCLUDE
?<p>If set to YES, this parameter will build WatchTV with FIREWIRE driver functions.
[
  ?<p>Valid values are YES and NO
  CFG_DEFAULT = NO
]




###########################################
# UART Setup Definitions (GPIO, DMA, etc) #
###########################################
?<tr><td colspan=4><font size="+1"><center><b>UART Setup Definitions</b></center></font></td></tr>

#### UART 1 ####
CFG_KEY = PIO_UART1_FLOW_CONTROL_OUT
?<p>This parameter defines the GPIO pin connected to UART1, FLOW CONTROL OUT
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART1_FLOW_CONTROL_IN
?<p>This parameter defines the GPIO pin connected to UART1, FLOW CONTROL IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART1_FLOW_READY_OUT
?<p>This parameter defines the GPIO pin connected to UART1, FLOW READY OUT
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART1_FLOW_READY_IN
?<p>This parameter defines the GPIO pin connected to UART1, FLOW READY IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART1_RING_INDICATE_IN
?<p>This parameter defines the GPIO pin connected to UART1, RING INDICATE IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART1_CARRIER_DETECT_IN
?<p>This parameter defines the GPIO pin connected to UART1, CARRIER DETECT IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = DMA_UART1_TX_CHANNEL
?<p>This parameter defines the DMA channel associated with UART1, Transmit operation
[
	?<p>May be any valid DMA channel number(0,1,2,...) or not enabled (-1)
	CFG_DEFAULT=DMA_DISABLED
]

CFG_KEY = DMA_UART1_RX_CHANNEL
?<p>This parameter defines the DMA channel associated with UART1, Receive operation
[
	?<p>May be any valid DMA channel number(0,1,2,...) or not enabled (-1)
	CFG_DEFAULT=DMA_DISABLED
]


#### UART 2 ####
CFG_KEY = PIO_UART2_FLOW_CONTROL_OUT
?<p>This parameter defines the GPIO pin connected to UART2, FLOW CONTROL OUT
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART2_FLOW_CONTROL_IN
?<p>This parameter defines the GPIO pin connected to UART2, FLOW CONTROL IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART2_FLOW_READY_OUT
?<p>This parameter defines the GPIO pin connected to UART2, FLOW READY OUT
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART2_FLOW_READY_IN
?<p>This parameter defines the GPIO pin connected to UART2, FLOW READY IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART2_RING_INDICATE_IN
?<p>This parameter defines the GPIO pin connected to UART2, RING INDICATE IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART2_CARRIER_DETECT_IN
?<p>This parameter defines the GPIO pin connected to UART2, CARRIER DETECT IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = DMA_UART2_TX_CHANNEL
?<p>This parameter defines the DMA channel associated with UART2, Transmit operation
[
	?<p>May be any valid DMA channel number(0,1,2,...) or not enabled (-1)
	CFG_DEFAULT=DMA_DISABLED
]

CFG_KEY = DMA_UART2_RX_CHANNEL
?<p>This parameter defines the DMA channel associated with UART2, Receive operation
[
	?<p>May be any valid DMA channel number(0,1,2,...) or not enabled (-1)
	CFG_DEFAULT=DMA_DISABLED
]


#### UART 3 ####
CFG_KEY = PIO_UART3_FLOW_CONTROL_OUT
?<p>This parameter defines the GPIO pin connected to UART3, FLOW CONTROL OUT
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART3_FLOW_CONTROL_IN
?<p>This parameter defines the GPIO pin connected to UART3, FLOW CONTROL IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART3_FLOW_READY_OUT
?<p>This parameter defines the GPIO pin connected to UART3, FLOW READY OUT
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART3_FLOW_READY_IN
?<p>This parameter defines the GPIO pin connected to UART3, FLOW READY IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART3_RING_INDICATE_IN
?<p>This parameter defines the GPIO pin connected to UART3, RING INDICATE IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = PIO_UART3_CARRIER_DETECT_IN
?<p>This parameter defines the GPIO pin connected to UART3, CARRIER DETECT IN
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

CFG_KEY = DMA_UART3_TX_CHANNEL
?<p>This parameter defines the DMA channel associated with UART3, Transmit operation
[
	?<p>May be any valid DMA channel number(0,1,2,...) or not enabled (-1)
	CFG_DEFAULT=DMA_DISABLED
]

CFG_KEY = DMA_UART3_RX_CHANNEL
?<p>This parameter defines the DMA channel associated with UART3, Receive operation
[
	?<p>May be any valid DMA channel number(0,1,2,...) or not enabled (-1)
	CFG_DEFAULT=DMA_DISABLED
]


# **************************************
# * Single/Dual Plane Graphics Options *
# **************************************
?<tr><td colspan=4><font size="+1"><center><b>Single and Dual Plane Graphics Options</b></center></font></td></tr>
CFG_KEY = GRAPHICS_PLANES
?<p> This parameter defines how many graphics planes the IC has.
[
  GP_SINGLE     = 1    
  GP_DUAL       = 2    
  CFG_DEFAULT = GP_SINGLE
]

# **************************************************************************
# * OpenCable OOB related board type Options for Upstream Power Calibration*
# **************************************************************************
?<tr><td colspan=4><font size="+1"><center><b>OpenCable OOB related board type Options for Upstream Power Calibration</b></center></font></td></tr>
CFG_KEY = OC_OOB_FREQ_ROLLOFF_SINC_TABLE_TYPE
?<p> This parameter defines the sinc table type to be used based on the board type.
[
  OC_OOB_FREQ_ROLLOFF_SINC_TABLE_NONE = 0
  OC_OOB_FREQ_ROLLOFF_SINC_TABLE_MILANO_NA = 1
  OC_OOB_FREQ_ROLLOFF_SINC_TABLE_MILANO_EURO = 2
  CFG_DEFAULT = OC_OOB_FREQ_ROLLOFF_SINC_TABLE_NONE
]

# **************************************
# * DP header reset                    *
# **************************************
?<p> This parameter defines the GPIO pin used to reset the DP header.
CFG_KEY = PIO_DP_HEADER_RESET
[
  ?<p>A description of the GPIO using combinations of the GPIO_XXX labels defined at the top of HWCONFIG.CFG.
  CFG_DEFAULT=GPIO_INVALID
]

# **********************************
# *       DVB Common Interface     *
# **********************************

?<tr><td colspan=4><font size="+1"><center><b>DVB Common Interface Options</b></center></font></td></tr>

CFG_KEY = DVBCI_SUPPORT
?<p>This parameter determines whether DVB Common Interface support is included, and
?which type of hardware is used with the IRD.
[
  DVBCI_HASKELL      = 1
  DVBCI_LONGVIEW     = 2
  CFG_DEFAULT        = NOT_PRESENT
]

###############
# CONVERT END #
###############

# *********************************************************
# Modifications:
# $Log:
#  115  mpeg      1.114       6/30/2004 12:06:35 AM  Tim White       CR(s) 9613
#       9614 : Add DMA_TYPE.
#  114  mpeg      1.113       6/25/2004 10:34:03 AM  Xiao Guang Yan  CR(s) 9583
#       9584 : Added front panel type for SDC boards.
#  113  mpeg      1.112       6/8/2004 3:15:58 AM    Dave Wilson     CR(s) 8936
#       8935 : Added key VIDEO_ENCODER_MACROVISION_CAPABLE to select whether
#       the target IRD is to have Macrovision support or not. This key is used
#       in an application makefile to determine whether or not to include the
#       Macrovision control driver.
#  112  mpeg      1.111       4/22/2004 2:39:54 AM   Steve Glennon   CR(s) 8901
#       8902 : y
#       Added DVBCI_CONFIG
#  111  mpeg      1.110       4/6/2004 2:27:31 PM    Xiao Guang Yan  CR(s) 8774
#       8775 : Added definition for Pudong audio DAC.
#  110  mpeg      1.109       3/20/2004 2:30:49 AM   Tim Ross        CR(s) 8598
#       : Removed linker addresses & hardware buffer sizes.
#  109  mpeg      1.108       3/19/2004 2:57:38 PM   Xiao Guang Yan  CR(s) 8595
#       : Added front panel key type description for Pudong board.
#  108  mpeg      1.107       3/18/2004 3:13:15 AM   Billy Jackman   CR(s) 8581
#       : Changed default value of I2C_BUS_CAMARO from I2C_BUS_NONE to
#       I2C_BUS_0.
#       Added stanza for CAMARO_ACCESS_METHOD to provide an explicit setting
#       for the access method for the Camaro demod.
#  107  mpeg      1.106       3/16/2004 12:33:37 AM  Matt Korte      CR(s) 8566
#       : Add support for Thomson Cable Tuner/Demod
#  106  mpeg      1.105       3/5/2004 6:35:15 AM    Bobby Bradford  CR(s) 8518
#       : Add secondary reset for BRONCO configurations to support two similar
#       hardware modem types on the same board (Bronco 013)
#  105  mpeg      1.104       3/4/2004 3:57:24 AM    Craig Dry       CR(s) 8495
#       : Create 2 new RAM_BUS_WIDTH settings allowing customer to force memory
#       controller into 16 or 32 bit mode, regardless of board jumper settings.
#  104  mpeg      1.103       3/2/2004 11:34:59 PM   Bobby Bradford  CR(s) 8481
#       : Move specification of MODEM_SW_TYPE (softmodem library type) from SW
#       to HW configs ... that way, we have fewer CONFIG files created for
#       multiple modem types
#  103  mpeg      1.102       2/20/2004 1:01:26 AM   Bobby Bradford  CR(s) 8435
#       : Change default for MODEM_HW_TYPE from EXTERNAL_SERIAL_MODEM to
#       HW_NONE.  This is being done to prevent applications from including
#       modem code (e.g. WatchTV) for HWCONFIGS that don't have a modem (e.g.
#       Milano).
#  102  mpeg      1.101       1/27/2004 2:19:24 AM   Billy Jackman   CR(s) 5111
#       : Add config keys for I2C_BUS_CAMARO and I2C_ADDR_CAMARO to allow
#       changes to demod_cobra.c to access the Camaro via IIC bus work.
#  101  mpeg      1.100       12/24/2003 12:52:21 AM Ian Mitchell    CR(s) 7739
#       : Modifications from testing on the Crosby platform.
#  100  mpeg      1.99        12/5/2003 7:11:39 AM   Tim Ross        CR(s) 8099
#       : Added description of how to use SCANBTNS driver with a GPIO button
#       keypad.
#  99   mpeg      1.98        11/19/2003 12:26:05 AM Ian Mitchell    CR(s):
#       7739 7982 Added new config keys for new hardware in the comming Crosby
#       platform.
#  98   mpeg      1.97        11/13/2003 7:37:18 AM  Yong Lu         CR(s):
#       7920 7921 
#       
#       
#       
#       
#       
#       
#       added a config key CFG_KEY = SERIAL2_CM_MPEG_OWNER
#  97   mpeg      1.96        11/5/2003 4:18:34 AM   Angela Swartz   CR(s):
#       7777 7778 added a CFG key PLL_CLK_OBSERVATION_REG_DEFAULT to be used to
#       set clocks for SmartMDP and VXX modems on Brazos boards; the default is
#       NOT_DETERMINED
#  96   mpeg      1.95        11/4/2003 8:39:09 AM   Yong Lu         CR(s):
#       7706 7805 
#       
#       changed the default PIO pin for MILANO
#  95   mpeg      1.94        11/2/2003 5:16:06 AM   Tim Ross        CR(s):
#       7719 7762 Added GPIO defaults for Milano 1.
#  94   mpeg      1.93        10/25/2003 5:01:38 AM  Sahil Bansal    CR(s):
#       7665 Added WABASH REVC1 define
#  93   mpeg      1.92        10/24/2003 6:19:08 AM  Angela Swartz   CR(s):
#       7708 Added PIO_DP_HEADER_RESET option used for DirectTV
#       
#  92   mpeg      1.91        9/23/2003 10:43:14 PM  Bobby Bradford  SCR(s)
#       7418 :
#       Change the default modem from NONE back to EXTERNAL_SERIAL_MODEM.
#       Now, if an application includes the modem.mak file (it expects to use
#       a modem) and there is no modem defined, then a default modem of
#       external serial will be assumed.  The external serial modem API will
#       be included, and if no modem port is defined, it will compile down to
#       a dummy modem that just returns OK for everything.
#  91   mpeg      1.90        9/23/2003 5:55:30 AM   Bob Van Gulick  SCR(s)
#       7519 :
#       Add support for DirecTV CAPs
#       
#  90   mpeg      1.89        9/20/2003 4:58:52 AM   Lucy C Allevato SCR(s)
#       5519 :
#       update config files to define the macro for the new tv encoder driver
#  89   mpeg      1.88        9/3/2003 2:24:46 AM    Bobby Bradford  SCR(s)
#       7418 :
#       Add support for DMA channel specfication for LLSERIAL Uart operation
#       ....
#       Add support for RING INDICATE and CARRIER DETECT (already supported in
#       LLSERIAL API, but not fully implemented)
#  88   mpeg      1.87        8/29/2003 5:19:02 AM   Lucy C Allevato SCR(s)
#       7397 :
#       added the description for the disable DAC key 
#  87   mpeg      1.86        8/29/2003 4:30:12 AM   Lucy C Allevato SCR(s)
#       7397 :
#       add a config key for the disable DAC bit on wabash
#  86   mpeg      1.85        8/28/2003 12:05:30 AM  Bob Van Gulick  SCR(s)
#       7387 :
#       Add CWP buffer allocation for DirecTV
#       
#  85   mpeg      1.84        8/21/2003 10:48:00 AM  Yong Lu         SCR(s):
#       7326 
#       compliant with the latest rev 0.5 of the POD ICD
#  84   mpeg      1.83        8/19/2003 3:27:46 AM   Miles Bintz     SCR(s)
#       7291 :
#       added mmy type definitions
#  83   mpeg      1.82        8/19/2003 2:36:48 AM   Miles Bintz     SCR(s)
#       7291 :
#       back out changes from #7291
#  82   mpeg      1.81        8/16/2003 6:49:30 AM   Miles Bintz     SCR(s):
#       7291 
#       Added ARMMMU definition.
#  81   mpeg      1.80        8/16/2003 2:46:14 AM   Billy Jackman   SCR(s)
#       7280 7281 :
#       Added configuration key PIO_LNB_22KHZ_DIRECTION to indicate presence of
#       a 
#       control for LNB 22KHz signal output or input.
#  80   mpeg      1.79        8/16/2003 2:08:14 AM   Moshe Yehushua  SCR(s):
#       7272 7273 
#       Added IB_IF_FREQUENCY
#       
#  79   mpeg      1.78        8/12/2003 10:22:06 PM  Bobby Bradford  SCR(s)
#       7213 7214 :
#       Modified the configuration parameters that specify modem options
#       to make it easier to add/support controllered (e.g. SmartVXX) modems
#  78   mpeg      1.77        8/6/2003 7:55:00 AM    Sahil Bansal    SCR(s):
#       7110 
#       Change configs so that FIREWIRE on/off decision is done in hwconfig.cfg
#       (no by default) and turned on in milano_na.cfg.  Removed FIREWIRE
#       ON/OFF define from swconfig.cfg and gen_allcable.cfg since it is really
#       more of a hw board issue as to whether it will be supported or not.
#  77   mpeg      1.76        7/25/2003 6:09:56 AM   Sahil Bansal    SCR(s):
#       7038 
#       Added configuration defines/switches for 1394
#  76   mpeg      1.75        7/24/2003 8:28:52 AM   Sunil Cheruvu   SCR(s):
#       6680 
#       Added the flag to distinguish the SINC table for Milano_na and
#       Milano_Euro
#  75   mpeg      1.74        7/18/2003 4:57:30 AM   Angela Swartz   SCR(s)
#       6973 :
#       remove config key PIO_RFMOD_ENA15 and rename PIO_RFMOD_ENA14 to
#       PIO_RFMOD_ENABLE
#  74   mpeg      1.73        7/11/2003 8:26:00 AM   Senthil Veluswamy SCR(s)
#       6935 :
#       Added comments to explain the SC Voltage Key Default added.
#  73   mpeg      1.72        7/11/2003 8:05:18 AM   Senthil Veluswamy SCR(s)
#       6935 :
#       Added Key to identify the Smart Card Voltage Configuration PIOs
#  72   mpeg      1.71        7/9/2003 2:27:18 AM    Miles Bintz     SCR(s)
#       6807 :
#       added descriptor type for milano
#  71   mpeg      1.70        7/1/2003 5:57:36 AM    Miles Bintz     SCR(s)
#       6807 :
#       changes to support milano IRD (added smart card hw & sw config
#       parameters)
#  70   mpeg      1.69        6/20/2003 6:00:50 AM   Miles Bintz     SCR(s):
#       6807 
#       Added milano type things (microtune tuner, milano TS_MUX)
#  69   mpeg      1.68        6/19/2003 11:28:12 PM  Ian Mitchell    SCR(s):
#       6773 
#       Created lables for terrestrial demods I2C address and bus.
#       New TS-SRC's for terrestrial tuner types.
#  68   mpeg      1.67        5/22/2003 6:31:28 AM   Tim White       SCR(s)
#       6526 6527 :
#       Force video DACs off for the internal_861_like encoder.
#       
#  67   mpeg      1.66        5/22/2003 12:37:12 AM  Tim Ross        SCR(s)
#       6498 :
#       Changed default for EXTERNAL_DECODER from BT835 to NOT_PRESENT.
#  66   mpeg      1.65        5/21/2003 6:39:38 AM   Tim Ross        SCR(s)
#       6497 6498 :
#       Added EXTERNAL_DECODER definitions.
#  65   mpeg      1.64        5/17/2003 7:56:14 AM   Brendan Donahe  SCR(s)
#       6341 6340 :
#       Added SMC_VOLT_CTRL_EUREKA to SMC_VOLT_CTRL types for Eureka.
#       
#  64   mpeg      1.63        5/17/2003 4:50:50 AM   Sunil Cheruvu   SCR(s):
#       6314 6315 
#       Added legal values for CRYSTAL_FREQUENCY.  Changed the values to match
#       app note.  Added OOB_IF_FREQ.
#  63   mpeg      1.62        5/16/2003 1:01:50 PM   Steve Glennon   SCR(s):
#       6389 6388 
#       Added key for DAC_PLL_REG_VALUE to allow providing the DAC PLL register
#       value for Wabash class products
#       
#  62   mpeg      1.61        5/15/2003 12:19:20 AM  Ganesh Banghar  SCR(s):
#       6309 6310 
#       changed SCART_TYPE from SCART_TYPE_NONE TO SCART_TYPE BRADY SINCE BRADY
#       ACTUALLY HAS A SCART_CONNECTOR.
#  61   mpeg      1.60        5/10/2003 8:05:48 AM   Steve Glennon   SCR(s):
#       6224 6225 6190 6179 
#       Added GRAPHICS_PLANES, GP_SINGLE and GP_DUAL entries, including brief
#       description, in support of dual plane modes of Wabash etc.
#       
#  60   mpeg      1.59        5/6/2003 5:09:44 AM    Tim White       SCR(s)
#       6172 :
#       Removed 7 segment LED support.
#       
#  59   mpeg      1.58        4/30/2003 10:44:12 PM  Bobby Bradford  SCR(s)
#       6037 :
#       Modify the MODEM_HW_TYPE parameter for easier use
#  58   mpeg      1.57        4/30/2003 8:37:48 AM   Miles Bintz     SCR(s)
#       6116 :
#       cm_img_prefix of sparta and milano needed to have a value assigned
#  57   mpeg      1.56        4/30/2003 5:23:04 AM   Miles Bintz     SCR(s)
#       6116 :
#       updated to video decoder config options
#  56   mpeg      1.55        4/30/2003 4:42:08 AM   Craig Dry       SCR(s)
#       5521 :
#       Added PLL_PIN_ALT_FUNC_REG_DEFAULT, PLL_PIN_GPIO_MUX0_REG_DEFAULT,
#       PLL_PIN_GPIO_MUX1_REG_DEFAULT,PLL_PIN_GPIO_MUX2_REG_DEFAULT,
#       PLL_PIN_GPIO_MUX3_REG_DEFAULT keys
#  55   mpeg      1.54        4/30/2003 4:42:06 AM   Miles Bintz     SCR(s)
#       6116 :
#       moved cable_modem and cable_modem_type to swconfig, added CM_IMG_PREFIX
#       
#  54   mpeg      1.53        4/29/2003 5:31:06 AM   Miles Bintz     SCR(s)
#       6115 :
#       Defined a DRM_SCALER type of WaBASH and added the wabash rev C ID.
#       
#  53   mpeg      1.52        4/24/2003 12:20:04 AM  Dave Wilson     SCR(s)
#       5862 :
#       Added DRM_TILE_TYPE definitions
#  52   mpeg      1.51        4/4/2003 3:55:26 AM    Senthil Veluswamy SCR(s)
#       5954 :
#       Renamed to ACAP_MODE. 
#  51   mpeg      1.50        4/3/2003 2:58:18 AM    Senthil Veluswamy SCR(s)
#       5944 :
#       Renamed ALOGTV_AUDIO to AUDIO_CAPTURE
#  50   mpeg      1.49        4/2/2003 6:12:08 AM    Senthil Veluswamy SCR(s)
#       5930 :
#       Added Config Keys to be able to Set Audio Capture Parameters.
#  49   mpeg      1.48        3/27/2003 3:16:54 AM   Steven Jones    SCR(s):
#       5871 
#       Add TERRESTRIAL_TUNER_TYPE field.
#  48   mpeg      1.47        3/26/2003 8:43:04 AM   Craig Dry       SCR(s)
#       5873 :
#       Added I2C_CONFIG_EEPROM_BUS to be used when reading configuration
#       data from eeprom during startup.
#  47   mpeg      1.46        3/26/2003 4:10:00 AM   Billy Jackman   SCR(s)
#       5854 :
#       Added configuration key PAGE_TABLE_INITIALIZATION to specify how page
#       tables
#       are set up on ARM 920 processors.  Valid values are PHYSICAL_RAM to use
#       an
#       actual table in memory and VIRTUAL_SECTION_FORMAT to use the virtual
#       section
#       configuration registers in Brazos rev B and beyond.  The default value
#       is
#       PHYSICAL_RAM.
#  46   mpeg      1.45        3/26/2003 3:49:32 AM   Bobby Bradford  SCR(s)
#       5864 :
#       Add definition for EUREKA front panel (same as Bronco, but
#       need new "name" for CODELDR keypad tables)
#  45   mpeg      1.44        3/25/2003 4:40:04 AM   Miles Bintz     SCR(s)
#       5858 :
#       Added new config option for CABLE_MODEM_TYPE
#       
#  44   mpeg      1.43        3/20/2003 6:46:36 AM   Craig Dry       SCR(s)
#       5830 :
#       At codeldr startup, read configuration data from eeprom and place
#       it at start of pawser memory.
#  43   mpeg      1.42        3/19/2003 6:12:46 AM   Bobby Bradford  SCR(s)
#       5108 :
#       Added config keys for P93_MEMBASE, PIO_P93_INTERRUPT and
#       PIO_P93_REST, which are used by P93HOST.C to define the hardware
#       configuration for the SmartMDP modem code.
#  42   mpeg      1.41        3/18/2003 6:40:52 AM   Billy Jackman   SCR(s)
#       5793 :
#       Added configuration key LNB_22KHZ_CONTROL to be used to specify how the
#       internal
#       signalling for 22KHz tone on the LNB is done.  Options are
#       LNB_22KHZ_ENABLE that
#       treats the signal as an enable (on/off) or LNB_22KHZ_TONE that is the
#       actual 22KHz
#       tone present or absent.  Default is LNB_22KHZ_ENABLE for proper
#       operation of all
#       IRDs prior to Bronco.
#  41   mpeg      1.40        3/14/2003 2:31:58 AM   Miles Bintz     SCR(s)
#       5753 :
#       Added mux type for bronco rev 3 board
#       
#  40   mpeg      1.39        3/6/2003 5:49:52 AM    Miles Bintz     SCR(s)
#       5634 :
#       CHIP_SUPPORTS_PIO_TIMED_RESET shouldn't be a hwconfig option because it
#       is chip specific.  this define has been moved to all the chip header
#       files
#       
#  39   mpeg      1.38        2/21/2003 4:13:42 AM   Brendan Donahe  SCR(s)
#       5567 :
#       Added ATA type for Brazos
#       
#  38   mpeg      1.37        2/20/2003 7:12:10 AM   Tim White       SCR(s)
#       5557 5556 :
#       Add Brazos pawser microcodes.
#       
#  37   mpeg      1.36        2/6/2003 1:50:48 AM    Dave Wilson     SCR(s)
#       5405 :
#       Added new parameters to set the DAC output mask to use for various
#       video
#       output modes.
#       
#  36   mpeg      1.35        1/29/2003 7:26:56 AM   Angela Swartz   SCR(s)
#       5307 :
#       added key PIO_RFMOD_ENA14 and ENA15
#  35   mpeg      1.34        1/25/2003 9:01:50 AM   Brendan Donahe  SCR(s)
#       5315 :
#       Added PCM_AUDIO_TYPEs.
#       
#  34   mpeg      1.33        1/24/2003 5:27:06 AM   Bobby Bradford  SCR(s)
#       5103 :
#       Added/Modified definitions of flow control GPIO to use
#       newly defined General GPIO method/api
#  33   mpeg      1.32        1/24/2003 5:00:22 AM   Dave Wilson     SCR(s)
#       5292 :
#       Defined new TS_MUX_TYPE_BRONCO to describe the transport stream
#       input/output
#       routing as used on the Bronco reference IRD.
#  32   mpeg      1.31        1/23/2003 10:59:44 PM  Bobby Bradford  SCR(s)
#       5275 :
#       Fixed cut&paste typo ... change default column values from
#       output to input
#  31   mpeg      1.30        1/23/2003 7:34:16 AM   Joe Kroesche    SCR(s)
#       5087 :
#       added key RF_MODULATOR
#  30   mpeg      1.29        1/23/2003 1:38:54 AM   Dave Wilson     SCR(s)
#       5099 :
#       Added a couple of RAM timing options and ISA device chip select
#       overrides.
#  29   mpeg      1.28        1/22/2003 4:14:10 AM   Bobby Bradford  SCR(s)
#       5275 :
#       Added defintions (per Dave Wilson new GPIO definitions) for
#       front-panel ROW and COLUMN GPIO.  SCANBTNS will be changed to use
#       the new values.
#  28   mpeg      1.27        1/18/2003 6:45:38 AM   Miles Bintz     SCR(s)
#       5089 :
#       Added feature for PIO timed reset functionality
#       
#  27   mpeg      1.26        1/17/2003 6:09:04 AM   Billy Jackman   SCR(s)
#       5095 :
#       Added configuration key PIO_LNB_ENABLE to specify a PIO pin for the
#       external
#       LNB signal generator enable, defaulting to GPIO_INVALID.
#  26   mpeg      1.25        1/16/2003 4:29:52 AM   Billy Jackman   SCR(s)
#       5095 :
#       Added a tag definition for an internal Cobra-like demod.
#       Added specification for a second I2C address for a Cobra demod strapped
#       for
#       DSS tuning mode.
#  25   mpeg      1.24        1/11/2003 1:39:52 AM   Miles Bintz     SCR(s)
#       5227 :
#       Backing out additions of cache and MMU definitions because they already
#       exist in swconfig file
#       
#  24   mpeg      1.23        1/10/2003 7:12:40 AM   Miles Bintz     SCR(s)
#       5227 :
#       Added definitions for CACHE and MMU type
#       
#  23   mpeg      1.22        12/21/2002 3:57:28 AM  Dave Wilson     SCR(s)
#       5204 :
#       Added features required for trace-to-memory function
#  22   mpeg      1.21        12/20/2002 6:23:56 AM  Billy Jackman   SCR(s)
#       5072 :
#       Add a config tag for the output mode of internal video encoders.
#  21   mpeg      1.20        12/20/2002 5:06:54 AM  Tim White       SCR(s)
#       5068 :
#       Added a keypad of NONE useful for emulation.
#       
#  20   mpeg      1.19        12/18/2002 5:56:50 AM  Senthil Veluswamy SCR(s)
#       5067 :
#       Added IIC_TYPE_BRAZOS
#  19   mpeg      1.18        12/18/2002 5:43:42 AM  Tim White       SCR(s)
#       5182 :
#       Removed ARM_PIT_TYPE config option, no longer needed.
#       
#  18   mpeg      1.17        12/17/2002 5:33:40 AM  Tim White       SCR(s)
#       5169 :
#       Removed BRAZOS types for PLL_TYPE and ATA since it uses the WABASH
#       types.
#       
#  17   mpeg      1.16        12/17/2002 5:18:32 AM  Miles Bintz     SCR(s)
#       5178 :
#       Added mpeg_video_tuner_type to list of defines
#       
#  16   mpeg      1.15        12/17/2002 4:47:42 AM  Dave Wilson     SCR(s)
#       5080 :
#       Reworked LED PIO definitions to use new generic GPIO description model 
#       
#  15   mpeg      1.14        12/13/2002 7:04:56 AM  Tim White       SCR(s)
#       5157 :
#       Removed the incorrect PCI_ID_<chipname> defines.  Modified and added
#       the per-chip
#       PCI_VEND_DEV_ID_<chip_name>_<sub_type> definitions.  Added a Brazos
#       PLL_TYPE since
#       it's different than Wabash.  Added a Brazos ATA_TYPE since it's
#       different than
#       Wabash as well.  Added Brazos MEM_DELAY since it's always different. 
#       Removed the
#       no_longer needed PCI_ROM_MODE_REQ_TYPE_<chip_name> definitions.
#       
#  14   mpeg      1.13        12/11/2002 5:38:44 AM  Dave Wilson     SCR(s)
#       5091 :
#       Added INTEXP_BRAZOS definition.
#  13   mpeg      1.12        12/10/2002 5:51:26 AM  Dave Wilson     SCR(s)
#       4903 :
#       Added definition for GPIOM_BRAZOS to describe Brazos GPIO muxing model.
#       
#  12   mpeg      1.11        12/7/2002 7:13:32 AM   Dave Wilson     SCR(s)
#       4903 :
#       Added values for DRM cursor fetch and scaler coefficient chip features.
#       
#  11   mpeg      1.10        12/6/2002 6:08:22 AM   Miles Bintz     SCR(s)
#       5074 :
#       added EXT_TS_SRC_SAT_CX2415X
#       
#  10   mpeg      1.9         12/5/2002 6:33:14 AM   Miles Bintz     SCR(s)
#       5074 :
#       Added HSDP_BRAZOS definition
#       
#  9    mpeg      1.8         12/5/2002 4:42:40 AM   Miles Bintz     SCR(s)
#       5074 :
#       Added Front panel keypad type for Bronco
#       Added mux type "none" since bronco doesn't have an HSDP mux
#       
#  8    mpeg      1.7         12/5/2002 4:21:24 AM   Dave Wilson     SCR(s)
#       5059 :
#       Renamed I2C_BUS_x labels to use indices 0 and 1 rather than 1 and 2 to
#       keep
#       the software definition in sync with the chip spec and app notes.
#  7    mpeg      1.6         11/28/2002 12:13:16 AM Dave Wilson     SCR(s)
#       4902 :
#       Added definition of I2C_ADDR/BUS_LED_DISPLAY.
#  6    mpeg      1.5         11/26/2002 4:49:02 AM  Dave Wilson     SCR(s)
#       4902 :
#       Added definitions for the address and bus connection of all supported
#       I2C
#       devices.
#  5    mpeg      1.4         11/23/2002 2:02:58 AM  Brendan Donahe  SCR(s)
#       4951 :
#       Added support for GPIO expander control of Abilene/Athens TDA8004 smart
#       card
#       voltage (3V vs. 5V).
#       
#  4    mpeg      1.3         11/22/2002 11:42:42 PM Larry Wang      SCR(s)
#       5011 :
#       Change default value of RAM_RANKx_CONFIG from RAM_RANK_CONFIG_EMPTY to
#       AUTOSENSE;  Remove the RAM_TYPE key.
#  3    mpeg      1.2         11/22/2002 6:13:50 AM  Dave Wilson     SCR(s)
#       5006 :
#       Added RAM_TYPE and RAM_RANKn_CONFIG information to allow Wabash builds
#       to
#       complete correctly.
#  2    mpeg      1.1         11/21/2002 3:41:54 AM  Dave Wilson     SCR(s)
#       4904 :
#       Previous version included a default definition of INTERNAL_ENCODER.
#       This is 
#       a chip feature and is defined in the chip header. Since the default was
#       
#       different from the Wabash case, it broke Wabash builds.
#  1    mpeg      1.0         11/20/2002 11:31:48 PM Dave Wilson     
# $
#

