/* cobra_cx24108.h */

/*+++ *******************************************************************\
*
*   Copyright and Disclaimer:
*
*       ---------------------------------------------------------------
*       ALL SOFTWARE, APPLICATIONS, DOCUMENTATION, OR MATERIALS        
*       FURNISHED HEREIN IS PROVIDED *AS IS*.  CONEXANT DOES NOT MAKE  
*       ANY WARRANTIES, EITHER EXPRESS OR IMPLIED, AND HEREBY EXPRESSLY
*       DISCLAIMS ANY AND ALL SUCH WARRANTIES TO THE EXTENT PERMITTED  
*       BY LAW, INCLUDING, SPECIFICALLY, ANY IMPLIED WARRANTY ARISING  
*       BY STATUTE OR OTHERWISE IN LAW OR FROM A COURSE OF DEALING OR  
*       USAGE OF TRADE.  CONEXANT DOES NOT MAKE ANY WARRANTIES, EITHER 
*       EXPRESS OR IMPLIED, AND HEREBY EXPRESSLY DISCLAIMS ANY AND ALL 
*       SUCH WARRANTIES WITH RESPECT TO ALL SOFTWARE, APPLICATIONS,    
*       DOCUMENTATION, AND MATERIALS INCLUDING ALL IMPLIED WARRANTIES  
*       OF MERCHANTABILITY, OR OF MERCHANTABLE QUALITY, OR OF FITNESS  
*       FOR ANY PURPOSE, PARTICULAR, SPECIFIC OR OTHERWISE, OR OF      
*       NONINFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OF OTHERS,     
*       RELATING TO THE SOFTWARE, APPLICATIONS, OPERATION,             
*       DOCUMENTATION, DATA OR RESULTS GENERATED BY THE OPERATION OR   
*       USE THEREOF, AND MATERIALS PROVIDED HEREIN.  THE ENTIRE RISK AS
*       TO THE SUBSTANCE, QUALITY AND PERFORMANCE OF SOFTWARE,         
*       APPLICATIONS, AND DOCUMENTATION DESCRIBING SUCH SOFTWARE       
*       REMAINS WITH THE BUYER.                                        
*                                                                      
*       REGARDLESS OF WHETHER ANY REMEDY SET FORTH HEREIN FAILS OF ITS 
*       ESSENTIAL PURPOSE OR OTHERWISE, CONEXANT SHALL NOT BE LIABLE   
*       FOR ANY EXEMPLARY, SPECIAL, PUNITIVE, SPECULATIVE, INDIRECT,   
*       CONSEQUENTIAL OR INCIDENTAL DAMAGES OF ANY KIND (INCLUDING     
*       WITHOUT LIMITATION LOST PROFITS, LOSS OF INCOME, LOSS OF       
*       GOODWILL, OR OTHER TANGIBLE OR INTANGIBLE BUSINESS LOSS)       
*       ARISING OUT OF OR IN CONNECTION WITH, DIRECTLY OR INDIRECTLY,  
*       SOFTWARE, APPLICATIONS, DOCUMENTATION, OR ANY SERVICES OR      
*       MATERIALS PROVIDED HEREUNDER, OR USE OR INABILITY TO USE THE   
*       SOFTWARE, EVEN IF CONEXANT HAS BEEN ADVISED OF THE POSSIBILITY 
*       OF SUCH DAMAGES.                                               
*
*       Copyright (c) 2001 Conexant Systems, Inc.
*       All Rights Reserved.
*       ---------------------------------------------------------------
*
*   Module Revision Id:
*
*       $Header: cobra_cx24108.h, 5, 3/16/04 11:45:22 AM, Billy Jackman$
*
*   Abstract:
*
*       Contains CX24108-specific definitions, enums and prototypes.
*
\******************************************************************* ---*/


#ifndef COBRA_CX24108_H_DEFINED
#define COBRA_CX24108_H_DEFINED

#define CX24108_NOMSTEP        1000000UL         /* step size in hz to use when searching for vco edges */
#define CX24108_EDGESTEP       40UL              /* NOMSTEPS to step when looking for loss of lock */
#define CX24108_MINHILOWDIST   (2UL*MM)          /* catch binary search into same tuner pll cal'd freq */
#define CX24108_MAX_FIRSTEDGE  6                 /* max number of steps in attempt to lock into a vco to find edges */
#define CX24108_MAX_EDGEDIV    25                /* max bin search attempts to find vco edge */
#define CX24108_MAX_LOOP       20                /* max search attempts (40Mhz step size) to find edge. */

#define CX24108_VCOEDGES       11                /* vco count, breakpoint count */
#define CX24108_BPCNT          (CX24108_VCOEDGES-1)

#define CX24108_CPCS           8                 /* charge-pump current array count (array in TUNERPARMS) */
#define CX24108_SLOPES         3                 /* slope table array count (array in TUNERPARMS) */
#define CX24108_MSPS_1_TO_5    0                 /* array 0 of TUNERSLOPE (in TUNERPARMS) is for 1..5 Msps */
#define CX24108_MSPS_5_TO_15   1                 /* array 1 ... is for 5..15 Msps */
#define CX24108_MSPS_15_TO_45  2                 /* array 2 ... is for 15..45 Msps */
#define CX24108_MSTOTEMP       50                /* ms wait req'd to acheive op temp. at start/restart */
#define CX24108_VCOEDGE_LEN    (sizeof(VCO_EDGE)*(CX24108_VCOEDGES))
#define CX24108_VCOBP_LEN      (sizeof(VCO_BP)*(CX24108_BPCNT))
#define CX24108_BPDEFAULT      50                /* default breakpoint percentage */

#define CX24108_CPC_LOW        CPC_2MA           /* default tuner settings */
#define CX24108_CPC_MED        CPC_3MA           /* medium */
#define CX24108_CPC_HIGH       CPC_3MA           /* high setting */

#define CX24108_CPC_LOWPCT     50       
#define CX24108_CPC_HIPCT      50

#define CX24108_START_DIV2     0                 /* starting point of DIV/2 VCOs */
#define CX24108_START_DIV4     8                 /* starting point of DIV/4 VCOs */

#define CX24108_CPC_START      14UL              /* start point of CPC in bit-str sent to tuner via demod */

#define ANTI_ALIAS_FILTER_UNCERTANTY   1000UL    /* add 1mHz to BW filter setting */
#define SPECIAL_RANGE          1UL               /* tuner offset in mHz to induce, when NIM-A/B have equal Fdesired */

#define TUNER_BURST_SEQUENCY_WAIT_CYCLES  16UL   /* number of waiting loops for demod to become ready
                                                    to accept a new burst sequence */
#define TUNER_BURST_BYTE_WAIT_CYCLES       8UL   /* number of waiting loops for demod to become ready
                                                    to accept the next burst byte */

/*******************************************************************************************************/
/* macros */
/*******************************************************************************************************/
#define _TUNER_CX24108_lsbA(n) (n->tuner.cx24108.lsba)

/*******************************************************************************************************/
/* CX24108-specific enums */
/*******************************************************************************************************/
#ifndef cx24108prog_def                 
#define cx24108prog_def                /* allow tuner-specific enum to be include once at compile */
typedef enum cx24108prog{              /* CX24108 (Rosie) tuner control bit settings (ctl bits 20,19) */
  CX24108_BAND_PROG=0x00,              /* band select  */
  CX24108_VGA_PROG=0x01,               /* vga programming */
  CX24108_VCA_PROG=0x02,               /* vca programming */
  CX24108_PLL_PROG=0x03                /* pll programming */
} CX24108_PROG;
#endif  /* #ifndef cx24108prog_def */

/*******************************************************************************************************/
/* prototypes */
/*******************************************************************************************************/
#ifndef CX24108_NOPROTO
BOOL  _TUNER_CX24108_powerup(NIM *nim);
void  _TUNER_CX24108_initialize(NIM *nim);
BOOL  _TUNER_CX24108_io(NIM *nim,CX24108_PROG ctl,unsigned long tunerdata);
void  _TUNER_CX24108_io_special(NIM *nim);
BOOL  _TUNER_CX24108_sendbyte(NIM *nim,unsigned char out_byte);
void  _TUNER_CX24108_defaultsettings(NIM *nim);
BOOL  _TUNER_CX24108_enable(NIM *nim,BOOL opt);
void  _TUNER_WaitForBurstSequenceRdy(NIM *nim);
void  _TUNER_WaitForBurstByteRdy(NIM *nim);
BOOL  _TUNER_CX24108_ready(NIM *nim);
BOOL  _TUNER_CX24108_readybyte(NIM *nim);
BOOL  _TUNER_validate_rdivval(NIM *nim,RDIVVAL rvalue);
BOOL  _TUNER_validate_frequency(NIM *nim,unsigned long freq);
unsigned long _TUNER_CX24108_calc_Fpll(NIM *nim,int na);
unsigned long _TUNER_CX24108_calc_pll(NIM *nim);
unsigned long  _TUNER_CX24108_calc_pllNA(NIM *nim);
BOOL  _TUNER_CX24108_setgainparms(NIM *nim,TUNERPARMS *tunerparms);
void  _TUNER_CX24108_adjust(NIM *nim);
BOOL  _TUNER_CX24108_band_info(NIM *nim,unsigned long Fr,unsigned int *bandbin,unsigned int *vcodivbin,VCOSET *vcoset,VCODIV *vcodiv,VCONO *vcono,unsigned long *tunpll);
unsigned long _TUNER_CX24108_vcoband_manual(NIM *nim,int vcoband);
void  _TUNER_CX24108_calc_bp(NIM *nim);
BOOL  _TUNER_CX24108_hardware_vcoedges(NIM *nim);
BOOL  _TUNER_CX24108_pll_status(NIM *nim,BOOL *locked);
BOOL  __TUNER_CX24108_first_edgeone(NIM *nim,unsigned long *mid_pt,BOOL *locked,VCOSET vcoband);
BOOL  _TUNER_CX24108_set_registers(NIM *nim,int nvalue,int avalue,RDIVVAL rvalue);
BOOL  _TUNER_CX24108_set_refdivider(NIM *nim,RDIVVAL rvalue);
BOOL  _TUNER_CX24108_set_freq(NIM *nim,unsigned long freq);
unsigned long  _TUNER_CX24108_hardware_vcoedge_low(NIM *nim,int vcoidx,unsigned long *first_edge);
unsigned long  _TUNER_CX24108_hardware_vcoedge_high(NIM *nim,int vcoidx,unsigned long low_edge,unsigned long first_edge,unsigned long vco_len);
BOOL   _TUNER_CX24108_first_edgelock(NIM *nim,unsigned long *mid_pt,BOOL *locked,VCOSET vcoband);
BOOL   __TUNER_CX24108_first_edgeone(NIM *nim,unsigned long *mid_pt,BOOL *locked,VCOSET vcoband);
BOOL   _TUNER_CX24108_SetGainSettings(NIM *nim,unsigned long symbolrateksps);
void   __DEBUG_vcoedges(NIM *nim);
void   __DEBUG_bandinfo(NIM *nim);
BOOL   _TUNER_CX24108_vco_range(NIM *nim,unsigned long  Fr,int vcoidx);
unsigned long  _TUNER_CX24108_vco_high(NIM *nim,int vcoidx);
unsigned long  _TUNER_CX24108_vco_low(NIM *nim,int vcoidx);
BOOL   _TUNER_CX24108_freq_manual(NIM *nim,unsigned long freq);

BOOL   _TUNER_CX24108_GetType(NIM *nim,TUNER *tunertype);
BOOL   _TUNER_CX24108_SetType(NIM *nim);
BOOL   _TUNER_CX24108_SetReferenceDivider(NIM *nim,RDIVVAL rvalue);
BOOL   _TUNER_CX24108_GetRegisters(NIM *nim,int *nvalue,int *avalue,RDIVVAL *rvalue);
BOOL   _TUNER_CX24108_SetParameters(NIM *nim,TUNERPARMS *tunerparms);
BOOL   _TUNER_CX24108_GetParameters(NIM *nim,TUNERPARMS *tunerparms);
BOOL   _TUNER_CX24108_SetFrequency(NIM *nim,unsigned long freq);
BOOL   _TUNER_CX24108_GetFrequency(NIM *nim,unsigned long *freq);
BOOL   _TUNER_CX24108_GetVCOBreakpoints(NIM *nim,int *bp_percentage,VCO_EDGE *vcoedge,VCO_BP *vcobp);
BOOL   _TUNER_CX24108_SetVCOBreakpointPercentage(NIM *nim,int bp_percentage);
BOOL   _TUNER_CX24108_GetVCOBreakpointPercentage(NIM *nim,int *bp_percentage);
BOOL   _TUNER_CX24108_SetFilterBandwidth(NIM *nim,unsigned long bandwidthkhz,unsigned long *mV);
BOOL   _TUNER_CX24108_SetFilterBandwidth(NIM *nim,unsigned long bandwidthkhz,unsigned long *mV);
BOOL   _TUNER_CX24108_validate(NIM *nim);
BOOL   _TUNER_CX24108_validate_rdivval(NIM *nim,RDIVVAL rvalue);
BOOL   _TUNER_CX24108_vco_na(NIM *nim,unsigned long na_str,unsigned long *Fvco);
BOOL   _TUNER_CX24108_validate_frequency(NIM *nim,unsigned long freq);
BOOL   _TUNER_CX24108_validate(NIM *nim);
BOOL   _TUNER_CX24108_getvco(NIM *nim,unsigned char *vcono);
BOOL   _TUNER_CX24108_GetReferenceDivider(NIM *nim,RDIVVAL *rvalue);
BOOL   _TUNER_CX24108_GetVcoDivider(NIM *nim,VCODIV *vcodiv);
BOOL   _TUNER_CX24108_GetPLLFrequency(NIM *nim,unsigned long *pllfreq);
BOOL   _TUNER_CX24108_GetLastLock(NIM *nim,unsigned long *freq);
BOOL   _TUNER_CX24108_SetLastLock(NIM *nim,unsigned long freq);
BOOL   _TUNER_CX24108_GetVCOEdges(NIM *nim,VCO_EDGE *vcoedge);
BOOL   _TUNER_CX24108_SetVCOEdges(NIM *nim,VCO_EDGE *vcoedge);
BOOL   _TUNER_CX24108_CalculateNAR(NIM *nim,unsigned long Fdesired,RDIVVAL R,unsigned int *N,unsigned int *A);
#endif /* #ifndef CX24108_NOPROTO */



/*******************************************************************************************************/
/*******************************************************************************************************/
/*******************************************************************************************************/
#endif  /* #ifndef COBRA_CX24108_H_DEFINED */
/* CR 9509 : Add an extra newline */

